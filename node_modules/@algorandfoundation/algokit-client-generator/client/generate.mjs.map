{"version":3,"file":"generate.mjs","sources":["../../src/client/generate.ts"],"sourcesContent":["import { DocumentParts, inline, NewLine } from '../output/writer'\nimport { paramsFactory } from './params-factory'\nimport { appClient } from './app-client'\nimport { deployTypes } from './deploy-types'\nimport { utilityTypes } from './utility-types'\nimport { imports } from './imports'\nimport { createGeneratorContext, GeneratorOptions } from './generator-context'\nimport { appTypes } from './app-types'\nimport { callComposerType } from './call-composer-types'\nimport { Arc56Contract, ProgramSourceInfo, StructField } from '@algorandfoundation/algokit-utils/types/app-arc56'\nimport { appFactory } from './app-factory'\nimport { Sanitizer } from '../util/sanitization'\n\nfunction convertStructs(s: StructField[], sanitizer: Sanitizer): StructField[] {\n  return s.map(\n    ({ name, type }) =>\n      ({\n        name: sanitizer.makeSafePropertyIdentifier(name),\n        type: typeof type === 'string' ? type : convertStructs(type, sanitizer),\n      }) satisfies StructField,\n  )\n}\n\nfunction shrinkAppSpec(app: Arc56Contract, options: GeneratorOptions): Arc56Contract {\n  const strippedAppSpec = structuredClone(app)\n\n  // Only keep the source info if it is needed for error mapping\n  const shrinkSourceInfo = (sourceInfo: ProgramSourceInfo['sourceInfo']) => {\n    return sourceInfo\n      .filter((entry) => entry.errorMessage)\n      .map((entry) => ({\n        pc: entry.pc,\n        errorMessage: entry.errorMessage,\n        // Keep minimal context for error mapping if available\n        ...(entry.teal !== undefined && { teal: entry.teal }),\n      }))\n  }\n\n  // Keep only source info entries that can be used for approval and clear program error mapping\n  if (strippedAppSpec.sourceInfo?.approval?.sourceInfo && strippedAppSpec.sourceInfo.approval.sourceInfo.length > 0) {\n    strippedAppSpec.sourceInfo.approval.sourceInfo = shrinkSourceInfo(strippedAppSpec.sourceInfo.approval.sourceInfo)\n  }\n\n  if (strippedAppSpec.sourceInfo?.clear?.sourceInfo && strippedAppSpec.sourceInfo.clear.sourceInfo.length > 0) {\n    strippedAppSpec.sourceInfo.clear.sourceInfo = shrinkSourceInfo(strippedAppSpec.sourceInfo.clear.sourceInfo)\n  }\n\n  if (strippedAppSpec.compilerInfo) {\n    delete strippedAppSpec.compilerInfo\n  }\n\n  // These are used for deploying but not for calling deployed apps\n  if (options.mode === 'minimal') {\n    if (strippedAppSpec.source) {\n      delete strippedAppSpec.source\n    }\n    if (strippedAppSpec.byteCode) {\n      delete strippedAppSpec.byteCode\n    }\n    if (strippedAppSpec.templateVariables) {\n      delete strippedAppSpec.templateVariables\n    }\n    if (strippedAppSpec.scratchVariables) {\n      delete strippedAppSpec.scratchVariables\n    }\n  }\n  return strippedAppSpec\n}\n\nexport function* generate(app: Arc56Contract, options?: Partial<GeneratorOptions>): DocumentParts {\n  const resolvedOptions: GeneratorOptions = {\n    // Set defaults\n    preserveNames: false,\n    mode: 'full',\n    ...options,\n  }\n  const reduceAppSpec = shrinkAppSpec(app, resolvedOptions)\n\n  const ctx = createGeneratorContext(reduceAppSpec, resolvedOptions)\n  yield `/* eslint-disable */`\n  yield `/**`\n  yield ` * This file was automatically generated by @algorandfoundation/algokit-client-generator.`\n  yield ` * DO NOT MODIFY IT BY HAND.`\n  yield ` * requires: @algorandfoundation/algokit-utils: ^7`\n  yield ` */`\n\n  yield* imports(ctx)\n  // Change the structs definition to sanitize property names according to the defined rules\n  // for instance, this may (unless you passed in --preserve-names) convert properties like my_prop to myProp\n  reduceAppSpec.structs = Object.fromEntries(\n    Object.keys(reduceAppSpec.structs).map((key) => [key, convertStructs(reduceAppSpec.structs[key], ctx.sanitizer)]),\n  )\n  yield* inline('export const APP_SPEC: Arc56Contract = ', JSON.stringify(reduceAppSpec), ' as unknown as Arc56Contract')\n  yield NewLine\n\n  yield* utilityTypes()\n  yield NewLine\n  yield* appTypes(ctx)\n\n  if (ctx.mode === 'full') {\n    yield* deployTypes(ctx)\n  }\n  yield NewLine\n\n  // Write a call factory\n  yield* paramsFactory(ctx)\n  yield NewLine\n  // Write a factory in full mode\n  if (ctx.mode === 'full') {\n    yield* appFactory(ctx)\n  }\n  // Write a client\n  yield* appClient(ctx)\n\n  yield* callComposerType(ctx)\n}\n"],"names":[],"mappings":"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"}