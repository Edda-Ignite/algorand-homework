{"version":3,"file":"get-equivalent-type.js","sources":["../../../src/client/helpers/get-equivalent-type.ts"],"sourcesContent":["import { Arc56Contract } from '@algorandfoundation/algokit-utils/types/app-arc56'\nimport {\n  ABIAddressType,\n  ABIArrayDynamicType,\n  ABIArrayStaticType,\n  ABIBoolType,\n  ABIByteType,\n  ABIReferenceType,\n  ABIStringType,\n  ABITupleType,\n  ABIType,\n  ABIUfixedType,\n  ABIUintType,\n  abiTypeIsTransaction,\n} from 'algosdk'\nimport { Sanitizer } from '../../util/sanitization'\n\nconst bigIntOrNumberType = 'bigint | number'\nconst bytesOrStringType = 'Uint8Array | string'\n\nexport function getEquivalentType(\n  abiTypeStr: string,\n  ioType: 'input' | 'output',\n  ctx: { app: Arc56Contract; sanitizer: Sanitizer },\n): string {\n  const { app, sanitizer } = ctx\n  if (abiTypeStr == 'void') {\n    return 'void'\n  }\n  if (abiTypeStr == 'AVMBytes') {\n    return ioType === 'input' ? bytesOrStringType : 'Uint8Array'\n  }\n  if (abiTypeStr == 'AVMString') {\n    return 'string'\n  }\n  if (abiTypeStr == 'AVMUint64') {\n    return 'bigint'\n  }\n  if (abiTypeIsTransaction(abiTypeStr)) {\n    return 'AppMethodCallTransactionArgument'\n  }\n  if (abiTypeStr == ABIReferenceType.account) {\n    return bytesOrStringType\n  }\n  if (abiTypeStr == ABIReferenceType.application || abiTypeStr == ABIReferenceType.asset) {\n    return 'bigint'\n  }\n  if (Object.keys(app.structs).includes(abiTypeStr)) {\n    return sanitizer.makeSafeTypeIdentifier(abiTypeStr)\n  }\n\n  const abiType = ABIType.from(abiTypeStr)\n\n  return abiTypeToTs(abiType, ioType)\n\n  function abiTypeToTs(abiType: ABIType, ioType: 'input' | 'output'): string {\n    if (abiType instanceof ABIUintType) {\n      if (abiType.bitSize < 53) return ioType === 'input' ? bigIntOrNumberType : 'number'\n      return ioType === 'input' ? bigIntOrNumberType : 'bigint'\n    }\n    if (abiType instanceof ABIArrayDynamicType) {\n      if (abiType.childType instanceof ABIByteType) return 'Uint8Array'\n\n      const childTsType = abiTypeToTs(abiType.childType, ioType)\n      if (childTsType === bigIntOrNumberType) {\n        return 'bigint[] | number[]'\n      } else if (childTsType === bytesOrStringType) {\n        return 'Uint8Array[] | string[]'\n      }\n\n      return `${childTsType}[]`\n    }\n    if (abiType instanceof ABIArrayStaticType) {\n      if (abiType.childType instanceof ABIByteType) return 'Uint8Array'\n      return `[${new Array(abiType.staticLength).fill(abiTypeToTs(abiType.childType, ioType)).join(', ')}]`\n    }\n    if (abiType instanceof ABIAddressType) {\n      return 'string'\n    }\n    if (abiType instanceof ABIBoolType) {\n      return 'boolean'\n    }\n    if (abiType instanceof ABIUfixedType) {\n      return 'number'\n    }\n    if (abiType instanceof ABITupleType) {\n      return `[${abiType.childTypes.map((c) => abiTypeToTs(c, ioType)).join(', ')}]`\n    }\n    if (abiType instanceof ABIByteType) {\n      return 'number'\n    }\n    if (abiType instanceof ABIStringType) {\n      return 'string'\n    }\n    return 'unknown'\n  }\n}\n"],"names":["abiTypeIsTransaction","ABIReferenceType","ABIType","ABIUintType","ABIArrayDynamicType","ABIByteType","ABIArrayStaticType","ABIAddressType","ABIBoolType","ABIUfixedType","ABITupleType","ABIStringType"],"mappings":"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"}