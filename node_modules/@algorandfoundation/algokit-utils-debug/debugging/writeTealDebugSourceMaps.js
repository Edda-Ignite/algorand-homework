'use strict';

var algokitUtils = require('@algorandfoundation/algokit-utils');
var utils = require('../utils.js');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

async function writeTealDebugSourceMap(source, projectRoot) {
    const path = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespaceDefault(require('path')); });
    if (!source.compiledTeal) {
        throw new Error('No compiled teal found');
    }
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const result = source.compiledTeal;
    const sourceMap = {
        ...result.sourceMap,
        sources: [`${source.fileName}${algokitUtils.TEAL_FILE_EXT}`],
    };
    const outputDirPath = path.join(projectRoot, algokitUtils.ALGOKIT_DIR, algokitUtils.SOURCES_DIR, source.appName);
    const sourceMapOutputPath = path.join(outputDirPath, `${source.fileName}${algokitUtils.TEAL_SOURCEMAP_EXT}`);
    const tealOutputPath = path.join(outputDirPath, `${source.fileName}${algokitUtils.TEAL_FILE_EXT}`);
    await utils.writeToFile(sourceMapOutputPath, JSON.stringify(sourceMap, null, 2));
    await utils.writeToFile(tealOutputPath, result.teal);
}
/**
 * Generates and writes debug source maps for multiple TEAL sources.
 *
 * @param input - An object of type TealSourcesDebugEventData containing an array of TEAL sources.
 * @returns A promise that resolves when all source maps have been generated and written.
 * @throws Will throw an error if there's an issue during the source map generation or writing process.
 */
async function writeTealDebugSourceMaps(input) {
    const sources = input.sources;
    const projectRoot = await utils.getProjectRoot();
    try {
        await Promise.all(sources.map((source) => {
            writeTealDebugSourceMap(source, projectRoot);
        }));
    }
    catch (error) {
        const err = error instanceof Error ? error : new Error(JSON.stringify(error, null, 2));
        throw err;
    }
}

exports.writeTealDebugSourceMaps = writeTealDebugSourceMaps;
//# sourceMappingURL=writeTealDebugSourceMaps.js.map
