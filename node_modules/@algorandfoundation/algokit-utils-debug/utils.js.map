{"version":3,"file":"utils.js","sources":["../src/utils.ts"],"sourcesContent":["import { Config } from '@algorandfoundation/algokit-utils'\nimport { DEFAULT_MAX_SEARCH_DEPTH } from './constants'\n\ninterface ErrnoException extends Error {\n  errno?: number\n  code?: string\n  path?: string\n  syscall?: string\n}\n\nexport const isNode = () => {\n  return typeof process !== 'undefined' && process.versions != null && process.versions.node != null\n}\n\nexport async function writeToFile(filePath: string, content: string): Promise<void> {\n  const path = await import('path')\n  const fs = await import('fs')\n\n  await fs.promises.mkdir(path.dirname(filePath), { recursive: true })\n  await fs.promises.writeFile(filePath, content, 'utf8')\n}\n\nexport async function createDirForFilePathIfNotExists(filePath: string): Promise<void> {\n  const path = await import('path')\n  const fs = await import('fs')\n\n  try {\n    await fs.promises.access(path.dirname(filePath))\n  } catch (error: unknown) {\n    const err = error as ErrnoException\n\n    if (err.code === 'ENOENT') {\n      await fs.promises.mkdir(path.dirname(filePath), { recursive: true })\n    } else {\n      throw err\n    }\n  }\n}\n\nexport async function getProjectRoot(): Promise<string> {\n  const projectRoot = Config.projectRoot\n\n  if (!projectRoot) {\n    const algokitProjectRoot = process.env.ALGOKIT_PROJECT_ROOT\n    if (algokitProjectRoot) {\n      const fs = await import('fs')\n      if (fs.existsSync(algokitProjectRoot)) {\n        Config.configure({ projectRoot: algokitProjectRoot })\n        return algokitProjectRoot\n      }\n    }\n\n    const fs = await import('fs')\n    const path = await import('path')\n\n    let currentPath = process.cwd()\n    for (let i = 0; i < (Config.maxSearchDepth || DEFAULT_MAX_SEARCH_DEPTH); i++) {\n      if (fs.existsSync(`${currentPath}/.algokit.toml`)) {\n        Config.configure({ projectRoot: currentPath })\n        return currentPath\n      }\n      currentPath = path.dirname(currentPath)\n    }\n  }\n\n  if (!projectRoot) {\n    throw new Error(\n      'No project root found. Please run this command from within a valid AlgoKit project (must contain a .algokit.toml file).',\n    )\n  }\n\n  return projectRoot\n}\n\nexport function joinPaths(...parts: string[]): string {\n  const separator = typeof process !== 'undefined' && process.platform === 'win32' ? '\\\\' : '/'\n  return parts.join(separator).replace(/\\/+/g, separator)\n}\n\n/**\n * Formats a date to YYYYMMDD_HHMMSS in UTC, equivalent to algokit-utils-py format:\n * datetime.now(tz=timezone.utc).strftime(\"%Y%m%d_%H%M%S\")\n */\nexport function formatTimestampUTC(date: Date): string {\n  // Get UTC components\n  const year = date.getUTCFullYear()\n  const month = String(date.getUTCMonth() + 1).padStart(2, '0') // Months are zero-based\n  const day = String(date.getUTCDate()).padStart(2, '0')\n  const hours = String(date.getUTCHours()).padStart(2, '0')\n  const minutes = String(date.getUTCMinutes()).padStart(2, '0')\n  const seconds = String(date.getUTCSeconds()).padStart(2, '0')\n\n  // Format the datetime string\n  return `${year}${month}${day}_${hours}${minutes}${seconds}`\n}\n"],"names":["Config","DEFAULT_MAX_SEARCH_DEPTH"],"mappings":"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"}