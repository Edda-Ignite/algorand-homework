import type { Expression } from './nodes';
import * as awst from './nodes';
import type { SourceLocation } from './source-location';
import { wtypes } from './wtypes';
export declare const intrinsicFactory: {
    bytesConcat({ left, right, sourceLocation }: {
        left: awst.Expression;
        right: awst.Expression;
        sourceLocation: SourceLocation;
    }): awst.BytesConstant | awst.StringConstant | awst.IntrinsicCall;
    err({ sourceLocation, comment }: {
        sourceLocation: SourceLocation;
        comment: string | null;
    }): awst.AssertExpression;
    assert({ sourceLocation, comment, condition }: {
        sourceLocation: SourceLocation;
        comment: string | null;
        condition: Expression;
    }): awst.AssertExpression;
    bytesLen({ value, sourceLocation }: {
        value: awst.Expression;
        sourceLocation: SourceLocation;
    }): awst.IntrinsicCall;
    bitLen({ value, sourceLocation }: {
        value: awst.Expression;
        sourceLocation: SourceLocation;
    }): awst.IntrinsicCall;
    itob({ value, sourceLocation }: {
        value: awst.Expression;
        sourceLocation: SourceLocation;
    }): awst.Expression;
    btoi({ value, sourceLocation }: {
        value: awst.Expression;
        sourceLocation: SourceLocation;
    }): awst.IntrinsicCall;
    bzero({ size, sourceLocation, wtype }: {
        size: bigint;
        sourceLocation: SourceLocation;
        wtype: wtypes.WType;
    }): awst.IntrinsicCall;
};
