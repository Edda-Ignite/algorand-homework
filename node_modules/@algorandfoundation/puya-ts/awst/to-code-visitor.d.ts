import type { AppStorageDefinition, AssertExpression, ContractMemberNodeVisitor, Emit, ExpressionVisitor, RootNodeVisitor, StatementVisitor } from './nodes';
import * as nodes from './nodes';
export declare class ToCodeVisitor implements RootNodeVisitor<string[]>, ContractMemberNodeVisitor<string[]>, StatementVisitor<string[]>, ExpressionVisitor<string> {
    #private;
    visitRange(expression: nodes.Range): string;
    visitVoidConstant(expression: nodes.VoidConstant): string;
    visitGroupTransactionReference(expression: nodes.GroupTransactionReference): string;
    visitPuyaLibCall(expression: nodes.PuyaLibCall): string;
    visitARC4Router(expression: nodes.ARC4Router): string;
    visitAppStorageDefinition(contractMemberNode: AppStorageDefinition): string[];
    visitUInt64PostfixUnaryOperation(expression: nodes.UInt64PostfixUnaryOperation): string;
    visitBigUIntPostfixUnaryOperation(expression: nodes.BigUIntPostfixUnaryOperation): string;
    visitCompiledContract(expression: nodes.CompiledContract): string;
    visitCompiledLogicSig(expression: nodes.CompiledLogicSig): string;
    visitLoopExit(statement: nodes.LoopExit): string[];
    visitLoopContinue(statement: nodes.LoopContinue): string[];
    visitGoto(statement: nodes.Goto): string[];
    visitIntersectionSliceExpression(expression: nodes.IntersectionSliceExpression): string;
    visitBoxValueExpression(expression: nodes.BoxValueExpression): string;
    visitIntegerConstant(expression: nodes.IntegerConstant): string;
    visitDecimalConstant(expression: nodes.DecimalConstant): string;
    visitBoolConstant(expression: nodes.BoolConstant): string;
    visitBytesConstant(expression: nodes.BytesConstant): string;
    visitStringConstant(expression: nodes.StringConstant): string;
    visitTemplateVar(expression: nodes.TemplateVar): string;
    visitMethodConstant(expression: nodes.MethodConstant): string;
    visitAddressConstant(expression: nodes.AddressConstant): string;
    visitARC4Encode(expression: nodes.ARC4Encode): string;
    visitCopy(expression: nodes.Copy): string;
    visitArrayConcat(expression: nodes.ArrayConcat): string;
    visitArrayPop(expression: nodes.ArrayPop): string;
    visitArrayExtend(expression: nodes.ArrayExtend): string;
    visitArrayLength(expression: nodes.ArrayLength): string;
    visitArrayReplace(expression: nodes.ArrayReplace): string;
    visitARC4Decode(expression: nodes.ARC4Decode): string;
    visitIntrinsicCall(expression: nodes.IntrinsicCall): string;
    visitCreateInnerTransaction(expression: nodes.CreateInnerTransaction): string;
    visitUpdateInnerTransaction(expression: nodes.UpdateInnerTransaction): string;
    visitCheckedMaybe(expression: nodes.CheckedMaybe): string;
    visitTupleExpression(expression: nodes.TupleExpression): string;
    visitTupleItemExpression(expression: nodes.TupleItemExpression): string;
    visitVarExpression(expression: nodes.VarExpression): string;
    visitInnerTransactionField(expression: nodes.InnerTransactionField): string;
    visitSubmitInnerTransaction(expression: nodes.SubmitInnerTransaction): string;
    visitFieldExpression(expression: nodes.FieldExpression): string;
    visitIndexExpression(expression: nodes.IndexExpression): string;
    visitSliceExpression(expression: nodes.SliceExpression): string;
    visitAppStateExpression(expression: nodes.AppStateExpression): string;
    visitAppAccountStateExpression(expression: nodes.AppAccountStateExpression): string;
    visitSingleEvaluation(expression: nodes.SingleEvaluation): string;
    visitReinterpretCast(expression: nodes.ReinterpretCast): string;
    visitNewArray(expression: nodes.NewArray): string;
    visitConditionalExpression(expression: nodes.ConditionalExpression): string;
    visitAssignmentExpression(expression: nodes.AssignmentExpression): string;
    visitNumericComparisonExpression(expression: nodes.NumericComparisonExpression): string;
    visitBytesComparisonExpression(expression: nodes.BytesComparisonExpression): string;
    visitSubroutineCallExpression(expression: nodes.SubroutineCallExpression): string;
    visitCallTarget(target: nodes.SubroutineCallExpression['target']): string;
    visitUInt64UnaryOperation(expression: nodes.UInt64UnaryOperation): string;
    visitBytesUnaryOperation(expression: nodes.BytesUnaryOperation): string;
    visitUInt64BinaryOperation(expression: nodes.UInt64BinaryOperation): string;
    visitBigUIntBinaryOperation(expression: nodes.BigUIntBinaryOperation): string;
    visitBytesBinaryOperation(expression: nodes.BytesBinaryOperation): string;
    visitBooleanBinaryOperation(expression: nodes.BooleanBinaryOperation): string;
    visitNot(expression: nodes.Not): string;
    visitEnumeration(expression: nodes.Enumeration): string;
    visitReversed(expression: nodes.Reversed): string;
    visitStateGet(expression: nodes.StateGet): string;
    visitStateDelete(expression: nodes.StateDelete): string;
    visitStateGetEx(expression: nodes.StateGetEx): string;
    visitStateExists(expression: nodes.StateExists): string;
    visitNewStruct(expression: nodes.NewStruct): string;
    visitExpressionStatement(statement: nodes.ExpressionStatement): string[];
    visitBlock(statement: nodes.Block): string[];
    visitIfElse(statement: nodes.IfElse): string[];
    visitSwitch(statement: nodes.Switch): string[];
    visitWhileLoop(statement: nodes.WhileLoop): string[];
    visitReturnStatement(statement: nodes.ReturnStatement): string[];
    visitAssignmentStatement(statement: nodes.AssignmentStatement): string[];
    visitUInt64AugmentedAssignment(statement: nodes.UInt64AugmentedAssignment): string[];
    visitBigUIntAugmentedAssignment(statement: nodes.BigUIntAugmentedAssignment): string[];
    visitBytesAugmentedAssignment(statement: nodes.BytesAugmentedAssignment): string[];
    visitForInLoop(statement: nodes.ForInLoop): string[];
    visitSubroutine(moduleStatement: nodes.Subroutine): string[];
    visitEmit(expression: Emit): string;
    visitContractMethod(statement: nodes.ContractMethod): string[];
    visitLogicSignature(moduleStatement: nodes.LogicSignature): string[];
    visitAssertExpression(expression: AssertExpression): string;
    private currentContract;
    visitContract(c: nodes.Contract): string[];
    visitSpecialMethod(statement: nodes.ContractMethod, name: string): string[];
}
