import type { AddressConstant, AppAccountStateExpression, AppStateExpression, AppStorageDefinition, ARC4Decode, ARC4Encode, ARC4Router, ArrayConcat, ArrayExtend, ArrayLength, ArrayPop, ArrayReplace, AssertExpression, AssignmentExpression, AssignmentStatement, BigUIntAugmentedAssignment, BigUIntBinaryOperation, BigUIntPostfixUnaryOperation, Block, BoolConstant, BooleanBinaryOperation, BoxValueExpression, BytesAugmentedAssignment, BytesBinaryOperation, BytesComparisonExpression, BytesConstant, BytesUnaryOperation, CheckedMaybe, CompiledContract, CompiledLogicSig, ConditionalExpression, Contract, ContractMemberNodeVisitor, ContractMethod, Copy, CreateInnerTransaction, DecimalConstant, Emit, Enumeration, ExpressionStatement, ExpressionVisitor, FieldExpression, ForInLoop, Goto, GroupTransactionReference, IfElse, IndexExpression, InnerTransactionField, IntegerConstant, IntersectionSliceExpression, IntrinsicCall, LogicSignature, LoopContinue, LoopExit, MethodConstant, NewArray, NewStruct, Not, NumericComparisonExpression, PuyaLibCall, Range, ReinterpretCast, ReturnStatement, Reversed, RootNodeVisitor, SingleEvaluation, SliceExpression, StateDelete, StateExists, StateGet, StateGetEx, StatementVisitor, StringConstant, SubmitInnerTransaction, Subroutine, SubroutineCallExpression, Switch, TemplateVar, TupleExpression, TupleItemExpression, UInt64AugmentedAssignment, UInt64BinaryOperation, UInt64PostfixUnaryOperation, UInt64UnaryOperation, UpdateInnerTransaction, VarExpression, VoidConstant, WhileLoop } from '../nodes';
export declare class FunctionTraverser implements ExpressionVisitor<void>, StatementVisitor<void> {
    visitExpressionStatement(statement: ExpressionStatement): void;
    visitBlock(statement: Block): void;
    visitArrayLength(expression: ArrayLength): void;
    visitArrayReplace(expression: ArrayReplace): void;
    visitGoto(statement: Goto): void;
    visitIfElse(statement: IfElse): void;
    visitSwitch(statement: Switch): void;
    visitWhileLoop(statement: WhileLoop): void;
    visitLoopExit(statement: LoopExit): void;
    visitLoopContinue(statement: LoopContinue): void;
    visitReturnStatement(statement: ReturnStatement): void;
    visitAssignmentStatement(statement: AssignmentStatement): void;
    visitUInt64AugmentedAssignment(statement: UInt64AugmentedAssignment): void;
    visitBigUIntAugmentedAssignment(statement: BigUIntAugmentedAssignment): void;
    visitBytesAugmentedAssignment(statement: BytesAugmentedAssignment): void;
    visitForInLoop(statement: ForInLoop): void;
    visitAssertExpression(expression: AssertExpression): void;
    visitIntegerConstant(expression: IntegerConstant): void;
    visitDecimalConstant(expression: DecimalConstant): void;
    visitBoolConstant(expression: BoolConstant): void;
    visitBytesConstant(expression: BytesConstant): void;
    visitStringConstant(expression: StringConstant): void;
    visitVoidConstant(expression: VoidConstant): void;
    visitTemplateVar(expression: TemplateVar): void;
    visitMethodConstant(expression: MethodConstant): void;
    visitAddressConstant(expression: AddressConstant): void;
    visitARC4Encode(expression: ARC4Encode): void;
    visitCopy(expression: Copy): void;
    visitArrayConcat(expression: ArrayConcat): void;
    visitArrayPop(expression: ArrayPop): void;
    visitArrayExtend(expression: ArrayExtend): void;
    visitARC4Decode(expression: ARC4Decode): void;
    visitIntrinsicCall(expression: IntrinsicCall): void;
    visitCreateInnerTransaction(expression: CreateInnerTransaction): void;
    visitUpdateInnerTransaction(expression: UpdateInnerTransaction): void;
    visitGroupTransactionReference(expression: GroupTransactionReference): void;
    visitCheckedMaybe(expression: CheckedMaybe): void;
    visitTupleExpression(expression: TupleExpression): void;
    visitTupleItemExpression(expression: TupleItemExpression): void;
    visitVarExpression(expression: VarExpression): void;
    visitInnerTransactionField(expression: InnerTransactionField): void;
    visitSubmitInnerTransaction(expression: SubmitInnerTransaction): void;
    visitFieldExpression(expression: FieldExpression): void;
    visitIndexExpression(expression: IndexExpression): void;
    visitSliceExpression(expression: SliceExpression): void;
    visitIntersectionSliceExpression(expression: IntersectionSliceExpression): void;
    visitAppStateExpression(expression: AppStateExpression): void;
    visitAppAccountStateExpression(expression: AppAccountStateExpression): void;
    visitBoxValueExpression(expression: BoxValueExpression): void;
    visitSingleEvaluation(expression: SingleEvaluation): void;
    visitReinterpretCast(expression: ReinterpretCast): void;
    visitNewArray(expression: NewArray): void;
    visitConditionalExpression(expression: ConditionalExpression): void;
    visitAssignmentExpression(expression: AssignmentExpression): void;
    visitNumericComparisonExpression(expression: NumericComparisonExpression): void;
    visitBytesComparisonExpression(expression: BytesComparisonExpression): void;
    visitSubroutineCallExpression(expression: SubroutineCallExpression): void;
    visitPuyaLibCall(expression: PuyaLibCall): void;
    visitUInt64UnaryOperation(expression: UInt64UnaryOperation): void;
    visitUInt64PostfixUnaryOperation(expression: UInt64PostfixUnaryOperation): void;
    visitBigUIntPostfixUnaryOperation(expression: BigUIntPostfixUnaryOperation): void;
    visitBytesUnaryOperation(expression: BytesUnaryOperation): void;
    visitUInt64BinaryOperation(expression: UInt64BinaryOperation): void;
    visitBigUIntBinaryOperation(expression: BigUIntBinaryOperation): void;
    visitBytesBinaryOperation(expression: BytesBinaryOperation): void;
    visitBooleanBinaryOperation(expression: BooleanBinaryOperation): void;
    visitNot(expression: Not): void;
    visitEmit(expression: Emit): void;
    visitRange(expression: Range): void;
    visitEnumeration(expression: Enumeration): void;
    visitReversed(expression: Reversed): void;
    visitStateGet(expression: StateGet): void;
    visitStateGetEx(expression: StateGetEx): void;
    visitStateExists(expression: StateExists): void;
    visitStateDelete(expression: StateDelete): void;
    visitNewStruct(expression: NewStruct): void;
    visitCompiledContract(expression: CompiledContract): void;
    visitCompiledLogicSig(expression: CompiledLogicSig): void;
    visitARC4Router(expression: ARC4Router): void;
}
export declare class AwstTraverser extends FunctionTraverser implements RootNodeVisitor<void>, ContractMemberNodeVisitor<void> {
    visitContractMethod(contractMemberNode: ContractMethod): void;
    visitAppStorageDefinition(contractMemberNode: AppStorageDefinition): void;
    visitSubroutine(rootNode: Subroutine): void;
    visitLogicSignature(rootNode: LogicSignature): void;
    visitContract(rootNode: Contract): void;
}
