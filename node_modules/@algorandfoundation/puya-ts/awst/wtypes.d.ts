import { TransactionKind } from './models';
import type { SourceLocation } from './source-location';
export declare enum AVMType {
    bytes = 1,
    uint64 = 2,
    any = 3
}
export declare namespace wtypes {
    class WType {
        constructor(props: {
            name: string;
            immutable?: boolean;
            scalarType: AVMType | null;
            ephemeral?: boolean;
        });
        readonly name: string;
        readonly immutable: boolean;
        /**
         * ephemeral types are not suitable for naive storage / persistence,
         *      even if their underlying type is a simple stack value
         */
        readonly ephemeral: boolean;
        /**
         * The AVM stack type of this type (if any)
         */
        readonly scalarType: AVMType | null;
        equals(other: WType): boolean;
        toString(): string;
        get id(): string;
    }
    const voidWType: WType;
    const boolWType: WType;
    const uint64WType: WType;
    const uint64RangeWType: WType;
    const bytesWType: WType;
    const stateKeyWType: WType;
    const boxKeyWType: WType;
    const stringWType: WType;
    const biguintWType: WType;
    const assetWType: WType;
    const accountWType: WType;
    const applicationWType: WType;
    class ARC4Type extends WType {
        readonly nativeType: WType | null;
        readonly arc4Name: string;
        constructor({ nativeType, arc4Name, ...rest }: {
            nativeType: WType | null;
            arc4Name: string;
            name: string;
            immutable?: boolean;
            scalarType?: AVMType | null;
            ephemeral?: boolean;
        });
    }
    class WStructType extends WType {
        fields: Record<string, WType>;
        readonly frozen = true;
        constructor({ fields, name }: {
            fields: Record<string, WType>;
            name: string;
        });
    }
    class WTuple extends WType {
        types: WType[];
        names: string[] | undefined;
        constructor(props: {
            names?: string[];
            types: WType[];
            immutable?: boolean;
            name?: string;
        });
        equals(other: WType): boolean;
        toString(): string;
    }
    abstract class NativeArray extends WType {
        readonly elementType: WType;
        readonly sourceLocation: SourceLocation | null;
        protected constructor(props: {
            name: string;
            itemType: WType;
            sourceLocation?: SourceLocation;
            scalarType?: AVMType;
        });
    }
    class StackArray extends NativeArray {
        readonly immutable = true;
        constructor(props: {
            itemType: WType;
            immutable: boolean;
            sourceLocation?: SourceLocation;
        });
    }
    class ReferenceArray extends NativeArray {
        readonly immutable = false;
        constructor(props: {
            itemType: WType;
            immutable: boolean;
            sourceLocation?: SourceLocation;
        });
    }
    class WEnumeration extends WType {
        readonly sequenceType: WType;
        constructor(props: {
            sequenceType: WType;
        });
    }
    class WGroupTransaction extends WType {
        transactionType: TransactionKind | null;
        arc4Name: string;
        constructor({ transactionType }: {
            transactionType?: TransactionKind;
        });
    }
    class WInnerTransaction extends WType {
        transactionType: TransactionKind | null;
        constructor({ transactionType }: {
            transactionType?: TransactionKind;
        });
    }
    class WInnerTransactionFields extends WType {
        transactionType: TransactionKind | null;
        constructor({ transactionType }: {
            transactionType?: TransactionKind;
        });
    }
    class ARC4UIntN extends ARC4Type {
        readonly n: bigint;
        constructor({ n, arc4Name }: {
            n: bigint;
            arc4Name?: string;
        });
    }
    class ARC4UFixedNxM extends ARC4Type {
        readonly n: bigint;
        readonly m: bigint;
        constructor({ n, m }: {
            n: bigint;
            m: bigint;
        });
    }
    class ARC4Struct extends ARC4Type {
        fields: Record<string, ARC4Type>;
        sourceLocation: SourceLocation | null;
        frozen: boolean;
        desc: string | null;
        constructor({ fields, sourceLocation, name, desc, frozen, }: {
            frozen: boolean;
            name: string;
            desc: string | null;
            fields: Record<string, ARC4Type>;
            sourceLocation?: SourceLocation;
        });
        toString(): string;
    }
    class ARC4Tuple extends ARC4Type {
        readonly types: ARC4Type[];
        readonly sourceLocation: SourceLocation | null;
        constructor({ types, sourceLocation }: {
            types: ARC4Type[];
            sourceLocation?: SourceLocation;
        });
    }
    abstract class ARC4Array extends ARC4Type {
        readonly elementType: ARC4Type;
        protected constructor(props: {
            arc4Name: string;
            otherEncodeableTypes: WType[];
            name: string;
            elementType: ARC4Type;
            nativeType?: WType;
            immutable?: boolean;
        });
    }
    class ARC4DynamicArray extends ARC4Array {
        readonly sourceLocation: SourceLocation | null;
        constructor({ elementType, sourceLocation, arc4Name, nativeType, immutable, }: {
            elementType: ARC4Type;
            sourceLocation?: SourceLocation;
            arc4Name?: string;
            nativeType?: WType;
            immutable?: boolean;
        });
    }
    class ARC4StaticArray extends ARC4Array {
        readonly sourceLocation: SourceLocation | null;
        readonly arraySize: bigint;
        constructor({ elementType, sourceLocation, arraySize, arc4Name, nativeType, immutable, }: {
            arraySize: bigint;
            elementType: ARC4Type;
            sourceLocation?: SourceLocation;
            arc4Name?: string;
            nativeType?: WType;
            immutable?: boolean;
        });
    }
    const arc4ByteAliasWType: ARC4UIntN;
    const arc4AddressAliasWType: ARC4StaticArray;
    const arc4BooleanWType: ARC4Type;
    const arc4StringAliasWType: ARC4DynamicArray;
}
