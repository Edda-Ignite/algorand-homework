import type { ARC4ABIMethodConfig } from '../awst/nodes';
import type { SourceLocation } from '../awst/source-location';
import type { FunctionPType, PType } from './ptypes';
import { ArrayPType, ObjectPType, TuplePType } from './ptypes';
import { ARC4EncodedType, ARC4StructType, ARC4TupleType, DynamicArrayType } from './ptypes/arc4-types';
/**
 * For a given ptype, return the equivalent ABI compatible type - or error if there is no compatible type
 * @param ptype The type of the parameter
 * @param direction The direction of the parameter (in for method args, out for method returns)
 * @param sourceLocation The location of the method or parameter, for use in error metadata
 */
export declare function ptypeToAbiPType(ptype: PType, direction: 'in' | 'out', sourceLocation: SourceLocation): PType;
/**
 * Generate a methodConstant node for the given function, making use of the ARC4ABIMethodConfig
 * @param functionType The function ptype
 * @param arc4Config ARC4 method config
 * @param sourceLocation The source location of the code generating the constant,
 */
export declare function buildArc4MethodConstant(functionType: FunctionPType, arc4Config: ARC4ABIMethodConfig, sourceLocation: SourceLocation): import("../awst/nodes").MethodConstant;
/**
 * Get the ARC4 type name for a ptype, or throw if the ptype is not usable in an ABI method.
 * @param ptype The ptype of the parameter
 * @param direction The direction of the parameter (in for method args, out for method returns)
 * @param sourceLocation The location of the method or parameter, for use in error metadata
 */
export declare function getABITypeName(ptype: PType, direction: 'in' | 'out', sourceLocation: SourceLocation): string;
/**
 * Is the given type an ARC4 encoded type, or can it be encoded to one
 * @param ptype The type to check
 */
export declare function isArc4EncodableType(ptype: PType): boolean;
/**
 * For a given type, return the arc4 encoded version of that type
 * @param ptype The type to be encoded
 * @param sourceLocation The source location triggering the conversion
 */
export declare function ptypeToArc4EncodedType(ptype: TuplePType, sourceLocation: SourceLocation): ARC4TupleType;
export declare function ptypeToArc4EncodedType(ptype: ObjectPType, sourceLocation: SourceLocation): ARC4StructType;
export declare function ptypeToArc4EncodedType(ptype: ArrayPType, sourceLocation: SourceLocation): DynamicArrayType;
export declare function ptypeToArc4EncodedType<T extends ARC4EncodedType>(ptype: T, sourceLocation: SourceLocation): T;
export declare function ptypeToArc4EncodedType(ptype: PType, sourceLocation: SourceLocation): ARC4EncodedType;
