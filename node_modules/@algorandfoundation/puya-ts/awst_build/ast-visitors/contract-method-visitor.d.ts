import type ts from 'typescript';
import * as awst from '../../awst/nodes';
import type { SourceLocation } from '../../awst/source-location';
import type { NodeBuilder } from '../eb';
import type { ContractClassPType, FunctionPType } from '../ptypes';
import { FunctionVisitor } from './function-visitor';
export declare class ContractMethodBaseVisitor extends FunctionVisitor {
    protected readonly _contractType: ContractClassPType;
    constructor(node: ts.MethodDeclaration | ts.ConstructorDeclaration, contractType: ContractClassPType);
    visitSuperKeyword(node: ts.SuperExpression): NodeBuilder;
    visitThisKeyword(node: ts.ThisExpression): NodeBuilder;
}
export declare class ContractMethodVisitor extends ContractMethodBaseVisitor {
    private readonly metaData;
    constructor(node: ts.MethodDeclaration, contractType: ContractClassPType);
    get result(): awst.ContractMethod;
    static buildContractMethod(node: ts.MethodDeclaration, contractType: ContractClassPType): () => awst.ContractMethod;
    private buildArc4Config;
    private validateDecoratorRoutingData;
    /**
     * Get routing properties inferred by conventional naming
     * @param methodName The name of the method
     * @private
     */
    private getConventionalRoutingConfig;
    checkABIMethodTypes(functionType: FunctionPType, sourceLocation: SourceLocation): void;
    checkBareMethodTypes(functionType: FunctionPType, sourceLocation: SourceLocation): void;
    private buildDefaultArgument;
}
