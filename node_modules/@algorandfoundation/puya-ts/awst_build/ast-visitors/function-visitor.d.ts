import ts from 'typescript';
import type * as awst from '../../awst/nodes';
import type { SourceLocation } from '../../awst/source-location';
import type { Statements } from '../../visitor/syntax-names';
import type { Visitor } from '../../visitor/visitor';
import type { InstanceBuilder } from '../eb';
import { FunctionPType } from '../ptypes';
import { BaseVisitor } from './base-visitor';
export declare abstract class FunctionVisitor extends BaseVisitor implements Visitor<ts.ParameterDeclaration, awst.SubroutineArgument>, Visitor<ts.Block, awst.Block>, Visitor<Statements, awst.Statement | awst.Statement[]> {
    protected readonly node: ts.MethodDeclaration | ts.FunctionDeclaration | ts.ConstructorDeclaration;
    protected accept: <TNode extends ts.Node>(node: TNode) => import("../../visitor/visitor").MethodReturnType<import("../../visitor/visitor").VisitorMethod<import("../../visitor/visitor").KindForNode<import("../../visitor/syntax-names").MapBaseType<TNode>>>, FunctionVisitor>;
    protected readonly _functionType: FunctionPType;
    constructor(node: ts.MethodDeclaration | ts.FunctionDeclaration | ts.ConstructorDeclaration);
    protected buildFunctionAwst(): {
        args: awst.SubroutineArgument[];
        documentation: awst.MethodDocumentation;
        body: awst.Block;
    };
    visitBindingName(bindingName: ts.BindingName, sourceLocation: SourceLocation): InstanceBuilder;
    evaluateParameterBindingExpressions(parameters: Iterable<ts.ParameterDeclaration>, sourceLocation: SourceLocation): awst.Statement[];
    visitTypeAliasDeclaration(node: ts.TypeAliasDeclaration): awst.Statement[];
    visitClassDeclaration(node: ts.ClassDeclaration): awst.Statement | awst.Statement[];
    visitVariableDeclarationList(node: ts.VariableDeclarationList): awst.Statement[];
    visitVariableStatement(node: ts.VariableStatement): awst.Statement | awst.Statement[];
    visitForStatement(node: ts.ForStatement): awst.Statement | awst.Statement[];
    visitForOfStatement(node: ts.ForOfStatement): awst.Statement | awst.Statement[];
    visitForInStatement(node: ts.ForInStatement): awst.Statement | awst.Statement[];
    visitTryStatement(node: ts.TryStatement): awst.Statement | awst.Statement[];
    visitEmptyStatement(node: ts.EmptyStatement): awst.Statement | awst.Statement[];
    visitExpressionStatement(node: ts.ExpressionStatement): awst.Statement | awst.Statement[];
    visitIfStatement(node: ts.IfStatement): awst.Statement | awst.Statement[];
    visitDoStatement(node: ts.DoStatement): awst.Statement | awst.Statement[];
    visitWhileStatement(node: ts.WhileStatement): awst.Statement | awst.Statement[];
    visitContinueStatement(node: ts.ContinueStatement): awst.Statement | awst.Statement[];
    visitBreakStatement(node: ts.BreakStatement): awst.Statement | awst.Statement[];
    visitReturnStatement(node: ts.ReturnStatement): awst.Statement | awst.Statement[];
    visitWithStatement(node: ts.WithStatement): awst.Statement | awst.Statement[];
    visitSwitchStatement(node: ts.SwitchStatement): awst.Statement | awst.Statement[];
    visitLabeledStatement(node: ts.LabeledStatement): awst.Statement | awst.Statement[];
    visitThrowStatement(node: ts.ThrowStatement): awst.Statement | awst.Statement[];
    visitDebuggerStatement(node: ts.DebuggerStatement): awst.Statement | awst.Statement[];
    visitImportDeclaration(node: ts.ImportDeclaration): awst.Statement | awst.Statement[];
    visitBlock(node: ts.Block): awst.Block;
    visitParameter(node: ts.ParameterDeclaration): awst.SubroutineArgument;
}
