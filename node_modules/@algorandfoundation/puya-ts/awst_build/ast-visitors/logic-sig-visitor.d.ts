import type ts from 'typescript';
import type { ClassElements } from '../../visitor/syntax-names';
import type { Visitor } from '../../visitor/visitor';
import type { LogicSigPType } from '../ptypes';
import { BaseVisitor } from './base-visitor';
export declare class LogicSigVisitor extends BaseVisitor implements Visitor<ClassElements, void> {
    private _logicSigPType;
    accept: <TNode extends ts.Node>(node: TNode) => import("../../visitor/visitor").MethodReturnType<import("../../visitor/visitor").VisitorMethod<import("../../visitor/visitor").KindForNode<import("../../visitor/syntax-names").MapBaseType<TNode>>>, LogicSigVisitor>;
    static buildLogicSig(classDec: ts.ClassDeclaration, ptype: LogicSigPType): () => import("../../awst/nodes").LogicSignature;
    private program?;
    private readonly metaData;
    constructor(classDec: ts.ClassDeclaration, _logicSigPType: LogicSigPType);
    get result(): import("../../awst/nodes").LogicSignature;
    private throwLogicSigNotSupported;
    visitClassStaticBlockDeclaration(node: ts.ClassStaticBlockDeclaration): void;
    visitConstructor(node: ts.ConstructorDeclaration): void;
    visitGetAccessor(node: ts.GetAccessorDeclaration): void;
    visitIndexSignature(node: ts.IndexSignatureDeclaration): void;
    visitMethodDeclaration(node: ts.MethodDeclaration): void;
    visitPropertyDeclaration(node: ts.PropertyDeclaration): void;
    visitSemicolonClassElement(node: ts.SemicolonClassElement): void;
    visitSetAccessor(node: ts.SetAccessorDeclaration): void;
}
