import type ts from 'typescript';
import type { ClassElements } from '../../visitor/syntax-names';
import type { Visitor } from '../../visitor/visitor';
import type { ARC4StructType } from '../ptypes/arc4-types';
import { BaseVisitor } from './base-visitor';
export declare class StructVisitor extends BaseVisitor implements Visitor<ClassElements, void> {
    accept: <TNode extends ts.Node>(node: TNode) => import("../../visitor/visitor").MethodReturnType<import("../../visitor/visitor").VisitorMethod<import("../../visitor/visitor").KindForNode<import("../../visitor/syntax-names").MapBaseType<TNode>>>, StructVisitor>;
    static buildStructDef(classDec: ts.ClassDeclaration, ptype: ARC4StructType): never[];
    constructor(classDec: ts.ClassDeclaration, ptype: ARC4StructType);
    private throwStructNotSupported;
    visitClassStaticBlockDeclaration(node: ts.ClassStaticBlockDeclaration): void;
    visitConstructor(node: ts.ConstructorDeclaration): void;
    visitGetAccessor(node: ts.GetAccessorDeclaration): void;
    visitIndexSignature(node: ts.IndexSignatureDeclaration): void;
    visitMethodDeclaration(node: ts.MethodDeclaration): void;
    visitPropertyDeclaration(node: ts.PropertyDeclaration): void;
    visitSemicolonClassElement(node: ts.SemicolonClassElement): void;
    visitSetAccessor(node: ts.SetAccessorDeclaration): void;
}
