import type * as ts from 'typescript';
import type { Visitor } from '../../visitor/visitor';
import { AwstBuildContext } from '../context/awst-build-context';
type ObjectNames = ts.PropertyName | ts.PseudoLiteralToken;
export declare class TextVisitor implements Visitor<ObjectNames, string> {
    get context(): AwstBuildContext;
    visitBigIntLiteral(node: ts.BigIntLiteral): string;
    visitTemplateHead(node: ts.TemplateHead): string;
    visitTemplateMiddle(node: ts.TemplateMiddle): string;
    visitTemplateTail(node: ts.TemplateTail): string;
    accept: <TNode extends ts.Node>(node: TNode) => import("../../visitor/visitor").MethodReturnType<import("../../visitor/visitor").VisitorMethod<import("../../visitor/visitor").KindForNode<import("../../visitor/syntax-names").MapBaseType<TNode>>>, TextVisitor>;
    visitIdentifier(node: ts.Identifier): string;
    visitNoSubstitutionTemplateLiteral(node: ts.NoSubstitutionTemplateLiteral): string;
    visitNumericLiteral(node: ts.NumericLiteral): string;
    visitComputedPropertyName(node: ts.ComputedPropertyName): string;
    visitPrivateIdentifier(node: ts.PrivateIdentifier): string;
    visitStringLiteral(node: ts.StringLiteral): string;
}
export {};
