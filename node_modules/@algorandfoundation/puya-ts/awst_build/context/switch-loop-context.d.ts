import ts from 'typescript';
import type { Block, Goto } from '../../awst/nodes';
import type { SourceLocation } from '../../awst/source-location';
type LoopContext = Disposable & {
    breakTarget: Block;
    continueTarget: Block;
    readonly hasBreaks: boolean;
    readonly hasContinues: boolean;
};
type SwitchContext = Disposable & {
    breakTarget: Block;
    caseTarget(caseIndex: number, sourceLocation: SourceLocation): Block;
    gotoCase(caseIndex: number, sourceLocation: SourceLocation): Goto;
    readonly hasBreaks: boolean;
};
/**
 * Tracks parent switches and loops so that break and continue statements
 * can target the correct parent.
 */
export declare class SwitchLoopContext {
    private labelCount;
    private unlabelledCount;
    constructor();
    private switchLoopStack;
    getBreakTarget(label: ts.Identifier | undefined, sourceLocation: SourceLocation): string;
    getContinueTarget(label: ts.Identifier | undefined, sourceLocation: SourceLocation): string;
    enterLoop(node: ts.WhileStatement | ts.ForStatement | ts.ForOfStatement | ts.ForInStatement | ts.DoStatement, sourceLocation: SourceLocation): LoopContext;
    private uniqueNameForLabel;
    enterSwitch(node: ts.SwitchStatement, sourceLocation: SourceLocation): SwitchContext;
}
export {};
