import type { Expression } from '../../../awst/nodes';
import type { SourceLocation } from '../../../awst/source-location';
import type { PType } from '../../ptypes';
import { DynamicArrayType, StaticArrayType } from '../../ptypes/arc4-types';
import type { InstanceBuilder, NodeBuilder } from '../index';
import { ClassBuilder } from '../index';
import { Arc4EncodedBaseExpressionBuilder } from './base';
export declare class DynamicArrayClassBuilder extends ClassBuilder {
    readonly ptype: import("../../ptypes").LibClassType;
    newCall(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): InstanceBuilder;
}
export declare class StaticArrayClassBuilder extends ClassBuilder {
    readonly ptype: import("../../ptypes").LibClassType;
    newCall(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): InstanceBuilder;
}
export declare class AddressClassBuilder extends ClassBuilder {
    readonly ptype: import("../../ptypes").LibClassType;
    newCall(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): InstanceBuilder;
}
export declare class StaticBytesClassBuilder extends ClassBuilder {
    readonly ptype: import("../../ptypes").LibClassType;
    newCall(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): InstanceBuilder;
}
export declare class DynamicBytesClassBuilder extends ClassBuilder {
    readonly ptype: import("../../ptypes").LibClassType;
    newCall(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): InstanceBuilder;
}
export declare abstract class ArrayExpressionBuilder<TArrayType extends DynamicArrayType | StaticArrayType> extends Arc4EncodedBaseExpressionBuilder<TArrayType> {
    iterate(): Expression;
    indexAccess(index: InstanceBuilder, sourceLocation: SourceLocation): NodeBuilder;
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class DynamicArrayExpressionBuilder extends ArrayExpressionBuilder<DynamicArrayType> {
    constructor(expr: Expression, ptype: PType);
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class StaticArrayExpressionBuilder extends ArrayExpressionBuilder<StaticArrayType> {
    constructor(expr: Expression, ptype: PType);
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class DynamicBytesExpressionBuilder extends DynamicArrayExpressionBuilder {
}
export declare class StaticBytesExpressionBuilder extends StaticArrayExpressionBuilder {
}
export declare class AddressExpressionBuilder extends ArrayExpressionBuilder<StaticArrayType> {
    constructor(expr: Expression, ptype: PType);
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
