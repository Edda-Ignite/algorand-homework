import type { Expression } from '../../../awst/nodes';
import type { SourceLocation } from '../../../awst/source-location';
import type { ARC4EncodedType } from '../../ptypes/arc4-types';
import type { InstanceBuilder, NodeBuilder } from '../index';
import { BuilderComparisonOp, InstanceExpressionBuilder } from '../index';
export declare class Arc4EncodedBaseExpressionBuilder<T extends ARC4EncodedType> extends InstanceExpressionBuilder<T> {
    constructor(expr: Expression, ptype: T);
    compare(other: InstanceBuilder, op: BuilderComparisonOp, sourceLocation: SourceLocation): InstanceBuilder;
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
    toBytes(sourceLocation: SourceLocation): Expression;
}
