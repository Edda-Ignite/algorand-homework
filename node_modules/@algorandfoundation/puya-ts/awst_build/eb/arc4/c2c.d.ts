import type { Expression } from '../../../awst/nodes';
import { SourceLocation } from '../../../awst/source-location';
import type { FunctionPType, PType } from '../../ptypes';
import { ContractProxyType } from '../../ptypes/arc4-types';
import { CompileFunctionBuilder } from '../compiled/compile-function';
import { FunctionBuilder, InstanceExpressionBuilder, NodeBuilder } from '../index';
export declare class AbiCallFunctionBuilder extends FunctionBuilder {
    readonly ptype: import("../../ptypes").LibFunctionType;
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class CompileArc4FunctionBuilder extends CompileFunctionBuilder {
    readonly ptype: import("../../ptypes").LibFunctionType;
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class ContractProxyExpressionBuilder extends InstanceExpressionBuilder<ContractProxyType> {
    constructor(expr: Expression, ptype: PType);
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class ContractProxyBareCreateFunctionBuilder extends FunctionBuilder {
    private readonly proxy;
    constructor(proxy: ContractProxyExpressionBuilder, sourceLocation: SourceLocation);
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class ContractProxyCallBuilder extends NodeBuilder {
    private readonly proxy;
    readonly ptype: undefined;
    constructor(proxy: ContractProxyExpressionBuilder, sourceLocation: SourceLocation);
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class ContractProxyCallFunctionBuilder extends FunctionBuilder {
    private readonly proxy;
    private readonly functionType;
    constructor(proxy: ContractProxyExpressionBuilder, functionType: FunctionPType, sourceLocation: SourceLocation);
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
