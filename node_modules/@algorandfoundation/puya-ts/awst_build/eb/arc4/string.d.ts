import type { Expression } from '../../../awst/nodes';
import type { SourceLocation } from '../../../awst/source-location';
import type { PType } from '../../ptypes';
import type { ARC4EncodedType } from '../../ptypes/arc4-types';
import type { InstanceBuilder, NodeBuilder } from '../index';
import { ClassBuilder } from '../index';
import { Arc4EncodedBaseExpressionBuilder } from './base';
export declare class StrClassBuilder extends ClassBuilder {
    readonly ptype: import("../../ptypes").LibClassType;
    newCall(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): InstanceBuilder;
}
export declare class StrExpressionBuilder extends Arc4EncodedBaseExpressionBuilder<ARC4EncodedType> {
    constructor(expression: Expression);
}
