import type { Expression } from '../../../awst/nodes';
import type { SourceLocation } from '../../../awst/source-location';
import type { PType, PTypeOrClass } from '../../ptypes';
import { ARC4StructClass, ARC4StructType } from '../../ptypes/arc4-types';
import type { NodeBuilder } from '../index';
import { ClassBuilder, InstanceBuilder } from '../index';
import { Arc4EncodedBaseExpressionBuilder } from './base';
export declare class StructClassBuilder extends ClassBuilder {
    readonly ptype: ARC4StructClass;
    constructor(sourceLocation: SourceLocation, ptype: PType);
    newCall(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): InstanceBuilder;
}
export declare class StructExpressionBuilder extends Arc4EncodedBaseExpressionBuilder<ARC4StructType> {
    constructor(expr: Expression, ptype: PType);
    hasProperty(name: string): boolean;
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
    resolvableToPType(ptype: PTypeOrClass): boolean;
    resolveToPType(ptype: PTypeOrClass): InstanceBuilder;
}
