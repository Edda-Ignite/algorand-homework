import type { BytesConstant, Expression } from '../../../awst/nodes';
import type { SourceLocation } from '../../../awst/source-location';
import type { PType } from '../../ptypes';
import type { InstanceBuilder, NodeBuilder } from '../index';
import { FunctionBuilder } from '../index';
export declare class InterpretAsArc4FunctionBuilder extends FunctionBuilder {
    readonly ptype: import("../../ptypes").LibFunctionType;
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class EncodeArc4FunctionBuilder extends FunctionBuilder {
    readonly ptype: import("../../ptypes").LibFunctionType;
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class DecodeArc4FunctionBuilder extends FunctionBuilder {
    readonly ptype: import("../../ptypes").LibFunctionType;
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare function validatePrefix(base: InstanceBuilder, expectedPrefix: BytesConstant | undefined, sourceLocation: SourceLocation): Expression;
export declare class MethodSelectorFunctionBuilder extends FunctionBuilder {
    readonly ptype: import("../../ptypes").LibFunctionType;
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class Arc4EncodedLengthFunctionBuilder extends FunctionBuilder {
    readonly ptype: import("../../ptypes").LibFunctionType;
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
