import type { awst } from '../../awst';
import type { Expression } from '../../awst/nodes';
import type { SourceLocation } from '../../awst/source-location';
import type { InstanceType, PType } from '../ptypes';
import type { InstanceBuilder, NodeBuilder } from './index';
import { BuilderComparisonOp, FunctionBuilder, InstanceExpressionBuilder } from './index';
export declare class BooleanFunctionBuilder extends FunctionBuilder {
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class BooleanExpressionBuilder extends InstanceExpressionBuilder<InstanceType> {
    constructor(expr: Expression);
    boolEval(sourceLocation: SourceLocation, negate: boolean): awst.Expression;
    toBytes(sourceLocation: SourceLocation): Expression;
    compare(other: InstanceBuilder, op: BuilderComparisonOp, sourceLocation: SourceLocation): InstanceBuilder;
}
