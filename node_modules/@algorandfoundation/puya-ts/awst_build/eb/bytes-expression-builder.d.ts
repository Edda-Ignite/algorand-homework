import type { awst } from '../../awst';
import type { Expression } from '../../awst/nodes';
import { BytesBinaryOperator } from '../../awst/nodes';
import type { SourceLocation } from '../../awst/source-location';
import type { InstanceType, PType } from '../ptypes';
import type { BuilderComparisonOp, InstanceBuilder, NodeBuilder } from './index';
import { BuilderUnaryOp, FunctionBuilder, InstanceExpressionBuilder, ParameterlessFunctionBuilder } from './index';
export declare class BytesFunctionBuilder extends FunctionBuilder {
    readonly ptype: import("../ptypes").LibFunctionType;
    taggedTemplate(head: string, spans: ReadonlyArray<readonly [InstanceBuilder, string]>, sourceLocation: SourceLocation): InstanceBuilder;
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class BytesExpressionBuilder extends InstanceExpressionBuilder<InstanceType> {
    constructor(expr: Expression);
    prefixUnaryOp(op: BuilderUnaryOp, sourceLocation: SourceLocation): InstanceBuilder;
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
    compare(other: InstanceBuilder, op: BuilderComparisonOp, sourceLocation: SourceLocation): InstanceBuilder;
    boolEval(sourceLocation: SourceLocation, negate: boolean): awst.Expression;
    toBytes(): awst.Expression;
    toString(sourceLocation: SourceLocation): Expression;
}
export declare class ConcatExpressionBuilder extends FunctionBuilder {
    private expr;
    constructor(expr: awst.Expression);
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class BytesInvertBuilder extends ParameterlessFunctionBuilder {
    private expr;
    constructor(expr: awst.Expression);
}
export declare class BitwiseOpFunctionBuilder extends FunctionBuilder {
    private expr;
    private op;
    constructor(expr: awst.Expression, op: BytesBinaryOperator);
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class ToStringBuilder extends ParameterlessFunctionBuilder {
    private expr;
    constructor(expr: awst.Expression);
}
