import type { Expression, LValue } from '../../awst/nodes';
import type { SourceLocation } from '../../awst/source-location';
import type { PType } from '../ptypes';
import { ContractClassPType } from '../ptypes';
import { FunctionBuilder, InstanceBuilder, NodeBuilder } from './index';
/**
 * Handles expressions using `this` in the context of a contract
 */
export declare class ContractThisBuilder extends InstanceBuilder<ContractClassPType> {
    #private;
    resolve(): Expression;
    resolveLValue(): LValue;
    constructor(ptype: ContractClassPType, sourceLocation: SourceLocation);
    get ptype(): ContractClassPType;
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
/**
 * Handles expressions using `super` in the context of a contract
 */
export declare class ContractSuperBuilder extends ContractThisBuilder {
    constructor(ptype: ContractClassPType, sourceLocation: SourceLocation);
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
/**
 * Matches polytype's super.class(SomeType) expression
 */
export declare class PolytypeExplicitClassAccessExpressionBuilder extends InstanceBuilder {
    readonly ptype: ContractClassPType;
    resolve(): Expression;
    resolveLValue(): LValue;
    constructor(ptype: ContractClassPType, sourceLocation: SourceLocation);
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class ContractClassBuilder extends InstanceBuilder {
    resolve(): Expression;
    resolveLValue(): LValue;
    readonly ptype: ContractClassPType;
    constructor(sourceLocation: SourceLocation, ptype: PType);
    newCall(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): InstanceBuilder;
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): InstanceBuilder;
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class ContractOptionsDecoratorBuilder extends FunctionBuilder {
    readonly ptype: import("../ptypes").LibFunctionType;
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
