import type { Expression } from '../../../awst/nodes';
import type { SourceLocation } from '../../../awst/source-location';
import type { PTypeOrClass } from '../../ptypes';
import { TransientType } from '../../ptypes';
import type { BuilderBinaryOp, BuilderComparisonOp, InstanceBuilder } from '../index';
import { BuilderUnaryOp } from '../index';
import { LiteralExpressionBuilder } from '../literal-expression-builder';
export declare class BigIntLiteralExpressionBuilder extends LiteralExpressionBuilder {
    readonly value: bigint;
    readonly ptype: TransientType;
    singleEvaluation(): InstanceBuilder;
    constructor(value: bigint, ptype: TransientType, location: SourceLocation);
    resolvableToPType(ptype: PTypeOrClass): boolean;
    boolEval(sourceLocation: SourceLocation, negate?: boolean): Expression;
    resolveToPType(ptype: PTypeOrClass): InstanceBuilder;
    binaryOp(other: InstanceBuilder, op: BuilderBinaryOp, sourceLocation: SourceLocation): InstanceBuilder;
    compare(other: InstanceBuilder, op: BuilderComparisonOp, sourceLocation: SourceLocation): InstanceBuilder;
    prefixUnaryOp(op: BuilderUnaryOp, sourceLocation: SourceLocation): InstanceBuilder;
    private getUpdatedPType;
}
