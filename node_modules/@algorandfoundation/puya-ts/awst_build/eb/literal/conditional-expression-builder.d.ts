import type { Expression } from '../../../awst/nodes';
import type { SourceLocation } from '../../../awst/source-location';
import type { PType, PTypeOrClass } from '../../ptypes';
import type { InstanceBuilder } from '../index';
import { LiteralExpressionBuilder } from '../literal-expression-builder';
export declare class ConditionalExpressionBuilder extends LiteralExpressionBuilder {
    private readonly _ptype;
    private readonly whenTrue;
    private readonly whenFalse;
    private readonly condition;
    get ptype(): PType;
    boolEval(sourceLocation: SourceLocation, negate?: boolean): Expression;
    constructor({ condition, ptype, whenFalse, whenTrue, sourceLocation, }: {
        ptype: PType;
        condition: Expression;
        whenTrue: InstanceBuilder;
        whenFalse: InstanceBuilder;
        sourceLocation: SourceLocation;
    });
    resolvableToPType(ptype: PTypeOrClass): boolean;
    resolveToPType(ptype: PTypeOrClass): InstanceBuilder;
}
