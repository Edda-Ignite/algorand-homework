import type { Expression, LValue } from '../../../awst/nodes';
import type { SourceLocation } from '../../../awst/source-location';
import type { PTypeOrClass } from '../../ptypes';
import { ObjectPType } from '../../ptypes';
import type { InstanceBuilder, NodeBuilder } from '../index';
import { LiteralExpressionBuilder } from '../literal-expression-builder';
export type ObjectLiteralParts = {
    type: 'properties';
    properties: Record<string, InstanceBuilder>;
} | {
    type: 'spread-object';
    obj: InstanceBuilder;
};
export declare class ObjectLiteralExpressionBuilder extends LiteralExpressionBuilder {
    private readonly parts;
    readonly _ptype: ObjectPType;
    get ptype(): ObjectPType;
    constructor(sourceLocation: SourceLocation, ptype: ObjectPType, parts: ObjectLiteralParts[]);
    resolve(): Expression;
    resolveLValue(): LValue;
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
    hasProperty(name: string): boolean;
    private toTuple;
    resolvableToPType(ptype: PTypeOrClass): ptype is ObjectPType;
    resolveToPType(ptype: PTypeOrClass): InstanceBuilder;
}
