import { Expression } from '../../awst/nodes';
import type { SourceLocation } from '../../awst/source-location';
import type { IntrinsicOpMapping } from '../op-metadata';
import type { PType } from '../ptypes';
import { IntrinsicFunctionGroupType, IntrinsicFunctionType } from '../ptypes';
import { FunctionBuilder, InstanceExpressionBuilder, NodeBuilder } from './index';
export declare class IntrinsicOpGroupBuilder extends NodeBuilder {
    private opGrouping;
    readonly ptype: IntrinsicFunctionGroupType;
    constructor(sourceLocation: SourceLocation, ptype: PType);
    hasProperty(name: string): boolean;
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
declare abstract class IntrinsicOpBuilderBase extends FunctionBuilder {
    private opMapping;
    protected constructor(sourceLocation: SourceLocation, opMapping: IntrinsicOpMapping);
    /**
     * Extract with 2 args extracts to the end of the sequence, the exact op code depends on if the start index is a constant value or not
     * @param args
     * @param typeArgs
     * @param sourceLocation
     */
    handleExtract(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class FreeIntrinsicOpBuilder extends IntrinsicOpBuilderBase {
    readonly ptype: IntrinsicFunctionType;
    constructor(sourceLocation: SourceLocation, ptype: PType);
}
export declare class GroupedIntrinsicOpBuilder extends IntrinsicOpBuilderBase {
    constructor(sourceLocation: SourceLocation, opMapping: IntrinsicOpMapping);
}
/**
 * Builder for expressions which have the 'type' of an intrinsic function or group but are not the singleton instance
 * imported from @algorandfoundat/algorand-typescript. This is not supported.
 */
export declare class IntrinsicOpGroupOrFunctionTypeBuilder extends InstanceExpressionBuilder<PType> {
    constructor(expr: Expression, ptype: PType);
}
export {};
