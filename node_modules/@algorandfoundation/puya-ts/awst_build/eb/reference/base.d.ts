import type { Expression } from '../../../awst/nodes';
import type { SourceLocation } from '../../../awst/source-location';
import type { PType } from '../../ptypes';
import type { BuilderComparisonOp, InstanceBuilder, NodeBuilder } from '../index';
import { InstanceExpressionBuilder } from '../index';
export type FieldMapping = Record<string, [string, PType]>;
export declare abstract class ReferenceTypeExpressionBuilder extends InstanceExpressionBuilder<PType> {
    protected options: {
        ptype: PType;
        backingType: PType;
        backingMember: string;
        fieldMapping: FieldMapping;
        fieldOpCode: string;
        fieldBoolComment: string;
    };
    constructor(expr: Expression, options: {
        ptype: PType;
        backingType: PType;
        backingMember: string;
        fieldMapping: FieldMapping;
        fieldOpCode: string;
        fieldBoolComment: string;
    });
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
export declare abstract class Uint64BackedReferenceTypeExpressionBuilder extends ReferenceTypeExpressionBuilder {
    constructor(expr: Expression, options: {
        ptype: PType;
        backingMember: string;
        fieldMapping: FieldMapping;
        fieldOpCode: string;
        fieldBoolComment: string;
    });
    toBytes(sourceLocation: SourceLocation): Expression;
    boolEval(sourceLocation: SourceLocation, negate?: boolean): Expression;
    compare(other: InstanceBuilder, op: BuilderComparisonOp, sourceLocation: SourceLocation): InstanceBuilder;
}
