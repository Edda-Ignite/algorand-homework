import type { AppStateExpression, Expression } from '../../../awst/nodes';
import type { SourceLocation } from '../../../awst/source-location';
import { AppStorageDeclaration } from '../../models/app-storage-declaration';
import type { ContractClassPType, PType } from '../../ptypes';
import { GlobalStateType } from '../../ptypes';
import type { NodeBuilder } from '../index';
import { FunctionBuilder, InstanceExpressionBuilder } from '../index';
export declare class GlobalStateFunctionBuilder extends FunctionBuilder {
    constructor(sourceLocation: SourceLocation);
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class GlobalStateExpressionBuilder extends InstanceExpressionBuilder<GlobalStateType> {
    constructor(expr: Expression, ptype: PType);
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
    protected buildField(): AppStateExpression;
}
export declare class GlobalStateFunctionResultBuilder extends GlobalStateExpressionBuilder {
    resolve(): Expression;
    readonly initialValue: Expression | undefined;
    private readonly _keyExpr;
    constructor(expr: Expression | undefined, ptype: PType, config: {
        initialValue?: Expression;
        sourceLocation: SourceLocation;
    });
    protected buildField(): AppStateExpression;
    buildStorageDeclaration(memberName: string, memberLocation: SourceLocation, memberDescription: string | null, contractType: ContractClassPType): AppStorageDeclaration;
}
