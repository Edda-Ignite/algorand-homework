import type { AppAccountStateExpression, Expression, LValue } from '../../../awst/nodes';
import type { SourceLocation } from '../../../awst/source-location';
import { AppStorageDeclaration } from '../../models/app-storage-declaration';
import type { ContractClassPType, PType } from '../../ptypes';
import { LocalStateType } from '../../ptypes';
import { FunctionBuilder, InstanceBuilder, InstanceExpressionBuilder, NodeBuilder } from '../index';
export declare class LocalStateFunctionBuilder extends FunctionBuilder {
    constructor(sourceLocation: SourceLocation);
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class LocalStateExpressionBuilder extends InstanceExpressionBuilder<LocalStateType> {
    constructor(expr: Expression, ptype: PType);
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
    private buildField;
}
export declare class LocalStateForAccountExpressionBuilder extends NodeBuilder {
    private key;
    private contentType;
    ptype: undefined;
    constructor(key: AppAccountStateExpression, contentType: PType);
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class LocalStateFunctionResultBuilder extends InstanceBuilder<LocalStateType> {
    resolve(): Expression;
    resolveLValue(): LValue;
    private _expr;
    constructor(expr: Expression | undefined, ptype: PType, config: {
        sourceLocation: SourceLocation;
    });
    readonly ptype: LocalStateType;
    buildStorageDeclaration(memberName: string, memberLocation: SourceLocation, memberDescription: string | null, contractType: ContractClassPType): AppStorageDeclaration;
}
