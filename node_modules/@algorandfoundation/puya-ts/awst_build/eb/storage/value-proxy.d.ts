import type { AppAccountStateExpression, AppStateExpression, Expression, FieldExpression, IndexExpression, TupleExpression, VarExpression } from '../../../awst/nodes';
import type { SourceLocation } from '../../../awst/source-location';
import type { PType, PTypeOrClass } from '../../ptypes';
import type { BuilderBinaryOp, BuilderComparisonOp, BuilderUnaryOp, InstanceBuilder, NodeBuilder } from '../index';
import { InstanceExpressionBuilder } from '../index';
export declare abstract class ValueProxy<TPType extends PType> extends InstanceExpressionBuilder<TPType> {
    private get proxied();
    resolve(): Expression;
    resolveLValue(): VarExpression | FieldExpression | IndexExpression | TupleExpression | AppStateExpression | AppAccountStateExpression;
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
    augmentedAssignment(other: InstanceBuilder, op: BuilderBinaryOp, sourceLocation: SourceLocation): InstanceBuilder;
    iterate(sourceLocation: SourceLocation): Expression;
    indexAccess(index: InstanceBuilder, sourceLocation: SourceLocation): NodeBuilder;
    boolEval(sourceLocation: SourceLocation, negate?: boolean): Expression;
    binaryOp(other: InstanceBuilder, op: BuilderBinaryOp, sourceLocation: SourceLocation): InstanceBuilder;
    prefixUnaryOp(op: BuilderUnaryOp, sourceLocation: SourceLocation): InstanceBuilder;
    postfixUnaryOp(op: BuilderUnaryOp, sourceLocation: SourceLocation): InstanceBuilder;
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
    compare(other: InstanceBuilder, op: BuilderComparisonOp, sourceLocation: SourceLocation): InstanceBuilder;
    taggedTemplate(head: string, spans: ReadonlyArray<readonly [InstanceBuilder, string]>, sourceLocation: SourceLocation): InstanceBuilder;
    singleEvaluation(): InstanceBuilder;
    hasProperty(_name: string): boolean;
    toBytes(sourceLocation: SourceLocation): Expression;
    resolvableToPType(ptype: PTypeOrClass): boolean;
    resolveToPType(ptype: PTypeOrClass): InstanceBuilder;
}
