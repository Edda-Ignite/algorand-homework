import type { Expression } from '../../../awst/nodes';
import type { SourceLocation } from '../../../awst/source-location';
import type { PType } from '../../ptypes';
import { GroupTransactionPType, TransactionFunctionType } from '../../ptypes';
import type { NodeBuilder } from '../index';
import { FunctionBuilder, InstanceExpressionBuilder } from '../index';
export declare class GroupTransactionExpressionBuilder extends InstanceExpressionBuilder<GroupTransactionPType> {
    constructor(expr: Expression, ptype: PType);
    hasProperty(name: string): boolean;
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class GroupTransactionFunctionBuilder extends FunctionBuilder {
    readonly ptype: TransactionFunctionType;
    constructor(sourceLocation: SourceLocation, ptype: PType);
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
