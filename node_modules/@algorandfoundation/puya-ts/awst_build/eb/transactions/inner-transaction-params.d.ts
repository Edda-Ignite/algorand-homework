import type { TransactionKind } from '../../../awst/models';
import type { Expression } from '../../../awst/nodes';
import type { SourceLocation } from '../../../awst/source-location';
import { TxnField } from '../../../awst/txn-fields';
import type { PType } from '../../ptypes';
import { ItxnParamsPType, TransactionFunctionType } from '../../ptypes';
import type { InstanceBuilder, NodeBuilder } from '../index';
import { FunctionBuilder, InstanceExpressionBuilder } from '../index';
export declare class ItxnParamsFactoryFunctionBuilder extends FunctionBuilder {
    readonly ptype: TransactionFunctionType;
    constructor(sourceLocation: SourceLocation, ptype: PType);
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare function mapTransactionFields(mappedFields: Map<TxnField, Expression>, fields: InstanceBuilder, kind: TransactionKind | undefined, sourceLocation: SourceLocation, ignoreProps?: Set<string>): void;
export declare class SubmitItxnGroupFunctionBuilder extends FunctionBuilder {
    ptype: import("../../ptypes").LibFunctionType;
    call(args: ReadonlyArray<NodeBuilder>, typeArgs: ReadonlyArray<PType>, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class ItxnParamsExpressionBuilder extends InstanceExpressionBuilder<ItxnParamsPType> {
    constructor(expr: Expression, ptype: PType);
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
