import type { Expression } from '../../awst/nodes';
import type { SourceLocation } from '../../awst/source-location';
import type { PType, PTypeOrClass } from '../ptypes';
import { Uint64EnumMemberType, Uint64EnumType } from '../ptypes';
import type { BuilderComparisonOp, InstanceBuilder } from './index';
import { InstanceExpressionBuilder, NodeBuilder } from './index';
export declare class Uint64EnumTypeBuilder extends NodeBuilder {
    readonly ptype: Uint64EnumType;
    constructor(sourceLocation: SourceLocation, ptype: PType);
    memberAccess(name: string, sourceLocation: SourceLocation): NodeBuilder;
}
export declare class Uint64EnumMemberExpressionBuilder extends InstanceExpressionBuilder<Uint64EnumMemberType> {
    constructor(expr: Expression, ptype: PType);
    compare(other: InstanceBuilder, op: BuilderComparisonOp, sourceLocation: SourceLocation): InstanceBuilder;
    resolvableToPType(ptype: PTypeOrClass): boolean;
    resolveToPType(ptype: PTypeOrClass): InstanceBuilder;
}
