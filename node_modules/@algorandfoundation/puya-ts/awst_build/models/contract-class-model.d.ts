import type { awst } from '../../awst';
import type { LogicSigReference } from '../../awst/models';
import { ContractReference } from '../../awst/models';
import type { AppStorageDefinition, ContractMethod, Statement } from '../../awst/nodes';
import { SourceLocation } from '../../awst/source-location';
import type { Props } from '../../typescript-helpers';
import { CustomKeyMap } from '../../util/custom-key-map';
import type { ContractClassPType } from '../ptypes';
import type { ContractOptionsDecoratorData } from './decorator-data';
import { LogicSigClassModel } from './logic-sig-class-model';
export declare class ContractClassModel {
    readonly isAbstract: boolean;
    get id(): ContractReference;
    readonly type: ContractClassPType;
    get name(): string;
    readonly options: ContractOptionsDecoratorData | undefined;
    readonly description: string | null;
    readonly propertyInitialization: Array<Statement>;
    readonly approvalProgram: ContractMethod | null;
    readonly clearProgram: ContractMethod | null;
    readonly ctor: ContractMethod | null;
    readonly methods: Array<ContractMethod>;
    readonly appState: Array<AppStorageDefinition>;
    readonly sourceLocation: SourceLocation;
    constructor(props: Props<Omit<ContractClassModel, 'name' | 'id'>>);
    hasExplicitStateTotals(): boolean;
    buildContract(compilationSet: CompilationSet): awst.Contract;
    private getModelForClass;
    private buildClusteredMetaClass;
    private static patchApprovalToCallCtor;
    private makeDefaultCreate;
}
export declare class CompilationSet extends CustomKeyMap<ContractReference | LogicSigReference, ContractClassModel | LogicSigClassModel> {
    constructor();
    get compilationOutputSet(): (ContractReference | LogicSigReference)[];
    getContractClass(cref: ContractReference): ContractClassModel;
    getLogicSig(lref: LogicSigReference): LogicSigClassModel;
}
