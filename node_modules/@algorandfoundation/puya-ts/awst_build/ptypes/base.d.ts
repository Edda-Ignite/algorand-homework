import { wtypes } from '../../awst/wtypes';
import type { DeliberateAny } from '../../typescript-helpers';
/**
 * Represents a public type visible to a developer of AlgoTS
 */
export declare abstract class PType {
    /**
     * Get the associated wtype for this ptype if applicable
     */
    abstract readonly wtype: wtypes.WType | undefined;
    /**
     * Get the unaliased name of this ptype
     */
    abstract readonly name: string;
    /**
     * Get the declaring module of this ptype
     */
    abstract readonly module: string;
    abstract readonly singleton: boolean;
    get fullName(): string;
    get wtypeOrThrow(): wtypes.WType;
    equals(other: PType): boolean;
    equalsOneOf(...others: PType[]): boolean;
    static equals(other: PType): boolean;
    equalsOrInstanceOf(other: PTypeOrClass): boolean;
    toString(): string;
}
export declare class GenericPType<T extends PType = PType> extends PType {
    readonly name: string;
    readonly module: string;
    readonly singleton = false;
    readonly wtype: undefined;
    readonly parameterise: (typeArgs: PType[]) => T;
    constructor(props: {
        name: string;
        module: string;
        parameterise: (typeArgs: PType[]) => T;
    });
}
export type PTypeOrClass = PType | {
    new (...args: DeliberateAny[]): PType;
    equals(other: PType): boolean;
};
