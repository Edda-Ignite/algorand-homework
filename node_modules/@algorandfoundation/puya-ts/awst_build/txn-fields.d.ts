import { TxnField } from '../awst/txn-fields';
import type { PType } from './ptypes';
export type TxnFieldMetaData = {
    /**
     * The awst field enum for this field
     */
    field: TxnField;
    /**
     * The ptype for this field, (or one unit of this field if it's an array)
     */
    ptype: PType;
    /**
     * Comments for jsdoc
     */
    comment: string | string[];
    /**
     * This field can be read but not set
     */
    computed?: boolean;
    /**
     * This field is an indexable collection
     */
    indexable?: boolean;
    /**
     * When receiving a value for this field, automatically convert single values into arrays
     */
    arrayPromote?: boolean;
};
export type TxnFieldsMetaData = Record<string, TxnFieldMetaData>;
export declare const paymentTxnFields: {
    receiver: {
        field: TxnField.Receiver;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    amount: {
        field: TxnField.Amount;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    closeRemainderTo: {
        field: TxnField.CloseRemainderTo;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    sender: {
        field: TxnField.Sender;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    fee: {
        field: TxnField.Fee;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    firstValid: {
        field: TxnField.FirstValid;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    firstValidTime: {
        field: TxnField.FirstValidTime;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lastValid: {
        field: TxnField.LastValid;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    note: {
        field: TxnField.Note;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lease: {
        field: TxnField.Lease;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    typeBytes: {
        field: TxnField.Type;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    type: {
        field: TxnField.TypeEnum;
        ptype: import("./ptypes").Uint64EnumMemberType;
        comment: string;
        computed: true;
    };
    groupIndex: {
        field: TxnField.GroupIndex;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        computed: true;
    };
    txnId: {
        field: TxnField.TxID;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    rekeyTo: {
        field: TxnField.RekeyTo;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
};
export declare const keyRegistrationTxnFields: {
    voteKey: {
        field: TxnField.VotePK;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    selectionKey: {
        field: TxnField.SelectionPK;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    voteFirst: {
        field: TxnField.VoteFirst;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    voteLast: {
        field: TxnField.VoteLast;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    voteKeyDilution: {
        field: TxnField.VoteKeyDilution;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    nonparticipation: {
        field: TxnField.Nonparticipation;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    stateProofKey: {
        field: TxnField.StateProofPK;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    sender: {
        field: TxnField.Sender;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    fee: {
        field: TxnField.Fee;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    firstValid: {
        field: TxnField.FirstValid;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    firstValidTime: {
        field: TxnField.FirstValidTime;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lastValid: {
        field: TxnField.LastValid;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    note: {
        field: TxnField.Note;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lease: {
        field: TxnField.Lease;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    typeBytes: {
        field: TxnField.Type;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    type: {
        field: TxnField.TypeEnum;
        ptype: import("./ptypes").Uint64EnumMemberType;
        comment: string;
        computed: true;
    };
    groupIndex: {
        field: TxnField.GroupIndex;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        computed: true;
    };
    txnId: {
        field: TxnField.TxID;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    rekeyTo: {
        field: TxnField.RekeyTo;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
};
export declare const assetConfigTxnFields: {
    configAsset: {
        field: TxnField.ConfigAsset;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    createdAsset: {
        field: TxnField.CreatedAssetID;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    total: {
        field: TxnField.ConfigAssetTotal;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    decimals: {
        field: TxnField.ConfigAssetDecimals;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    defaultFrozen: {
        field: TxnField.ConfigAssetDefaultFrozen;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    unitName: {
        field: TxnField.ConfigAssetUnitName;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    assetName: {
        field: TxnField.ConfigAssetName;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    url: {
        field: TxnField.ConfigAssetURL;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    metadataHash: {
        field: TxnField.ConfigAssetMetadataHash;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    manager: {
        field: TxnField.ConfigAssetManager;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    reserve: {
        field: TxnField.ConfigAssetReserve;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    freeze: {
        field: TxnField.ConfigAssetFreeze;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    clawback: {
        field: TxnField.ConfigAssetClawback;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    sender: {
        field: TxnField.Sender;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    fee: {
        field: TxnField.Fee;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    firstValid: {
        field: TxnField.FirstValid;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    firstValidTime: {
        field: TxnField.FirstValidTime;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lastValid: {
        field: TxnField.LastValid;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    note: {
        field: TxnField.Note;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lease: {
        field: TxnField.Lease;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    typeBytes: {
        field: TxnField.Type;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    type: {
        field: TxnField.TypeEnum;
        ptype: import("./ptypes").Uint64EnumMemberType;
        comment: string;
        computed: true;
    };
    groupIndex: {
        field: TxnField.GroupIndex;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        computed: true;
    };
    txnId: {
        field: TxnField.TxID;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    rekeyTo: {
        field: TxnField.RekeyTo;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
};
export declare const assetTransferTxnFields: {
    xferAsset: {
        field: TxnField.XferAsset;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    assetAmount: {
        field: TxnField.AssetAmount;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    assetSender: {
        field: TxnField.AssetSender;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    assetReceiver: {
        field: TxnField.AssetReceiver;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    assetCloseTo: {
        field: TxnField.AssetCloseTo;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    sender: {
        field: TxnField.Sender;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    fee: {
        field: TxnField.Fee;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    firstValid: {
        field: TxnField.FirstValid;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    firstValidTime: {
        field: TxnField.FirstValidTime;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lastValid: {
        field: TxnField.LastValid;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    note: {
        field: TxnField.Note;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lease: {
        field: TxnField.Lease;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    typeBytes: {
        field: TxnField.Type;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    type: {
        field: TxnField.TypeEnum;
        ptype: import("./ptypes").Uint64EnumMemberType;
        comment: string;
        computed: true;
    };
    groupIndex: {
        field: TxnField.GroupIndex;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        computed: true;
    };
    txnId: {
        field: TxnField.TxID;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    rekeyTo: {
        field: TxnField.RekeyTo;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
};
export declare const assetFreezeTxnFields: {
    freezeAsset: {
        field: TxnField.FreezeAsset;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    freezeAccount: {
        field: TxnField.FreezeAssetAccount;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    frozen: {
        field: TxnField.FreezeAssetFrozen;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    sender: {
        field: TxnField.Sender;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    fee: {
        field: TxnField.Fee;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    firstValid: {
        field: TxnField.FirstValid;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    firstValidTime: {
        field: TxnField.FirstValidTime;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lastValid: {
        field: TxnField.LastValid;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    note: {
        field: TxnField.Note;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lease: {
        field: TxnField.Lease;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    typeBytes: {
        field: TxnField.Type;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    type: {
        field: TxnField.TypeEnum;
        ptype: import("./ptypes").Uint64EnumMemberType;
        comment: string;
        computed: true;
    };
    groupIndex: {
        field: TxnField.GroupIndex;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        computed: true;
    };
    txnId: {
        field: TxnField.TxID;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    rekeyTo: {
        field: TxnField.RekeyTo;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
};
export declare const applicationCallTxnFields: {
    appId: {
        field: TxnField.ApplicationID;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    onCompletion: {
        field: TxnField.OnCompletion;
        ptype: import("./ptypes").Uint64EnumMemberType;
        comment: string;
    };
    numAppArgs: {
        field: TxnField.NumAppArgs;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    numAccounts: {
        field: TxnField.NumAccounts;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    approvalProgram: {
        field: TxnField.ApprovalProgramPages;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    clearStateProgram: {
        field: TxnField.ClearStateProgramPages;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    numAssets: {
        field: TxnField.NumAssets;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    numApps: {
        field: TxnField.NumApplications;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    globalNumUint: {
        field: TxnField.GlobalNumUint;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    globalNumBytes: {
        field: TxnField.GlobalNumByteSlice;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    localNumUint: {
        field: TxnField.LocalNumUint;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    localNumBytes: {
        field: TxnField.LocalNumByteSlice;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    extraProgramPages: {
        field: TxnField.ExtraProgramPages;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lastLog: {
        field: TxnField.LastLog;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    logs: {
        field: TxnField.Logs;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        indexable: true;
        computed: true;
    };
    numApprovalProgramPages: {
        field: TxnField.NumApprovalProgramPages;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    approvalProgramPages: {
        field: TxnField.ApprovalProgramPages;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        indexable: true;
        arrayPromote: true;
    };
    numClearStateProgramPages: {
        field: TxnField.NumClearStateProgramPages;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    clearStateProgramPages: {
        field: TxnField.ClearStateProgramPages;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        indexable: true;
        arrayPromote: true;
    };
    appArgs: {
        field: TxnField.ApplicationArgs;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        indexable: true;
    };
    accounts: {
        field: TxnField.Accounts;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        indexable: true;
    };
    assets: {
        field: TxnField.Assets;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        indexable: true;
    };
    apps: {
        field: TxnField.Applications;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        indexable: true;
    };
    createdApp: {
        field: TxnField.CreatedApplicationID;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    /**
     * Number of logs
     */
    numLogs: {
        field: TxnField.NumLogs;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    sender: {
        field: TxnField.Sender;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    fee: {
        field: TxnField.Fee;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    firstValid: {
        field: TxnField.FirstValid;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    firstValidTime: {
        field: TxnField.FirstValidTime;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lastValid: {
        field: TxnField.LastValid;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    note: {
        field: TxnField.Note;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lease: {
        field: TxnField.Lease;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    typeBytes: {
        field: TxnField.Type;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    type: {
        field: TxnField.TypeEnum;
        ptype: import("./ptypes").Uint64EnumMemberType;
        comment: string;
        computed: true;
    };
    groupIndex: {
        field: TxnField.GroupIndex;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        computed: true;
    };
    txnId: {
        field: TxnField.TxID;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    rekeyTo: {
        field: TxnField.RekeyTo;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
};
export declare const anyTxnFields: {
    appId: {
        field: TxnField.ApplicationID;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    onCompletion: {
        field: TxnField.OnCompletion;
        ptype: import("./ptypes").Uint64EnumMemberType;
        comment: string;
    };
    numAppArgs: {
        field: TxnField.NumAppArgs;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    numAccounts: {
        field: TxnField.NumAccounts;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    approvalProgram: {
        field: TxnField.ApprovalProgramPages;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    clearStateProgram: {
        field: TxnField.ClearStateProgramPages;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    numAssets: {
        field: TxnField.NumAssets;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    numApps: {
        field: TxnField.NumApplications;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    globalNumUint: {
        field: TxnField.GlobalNumUint;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    globalNumBytes: {
        field: TxnField.GlobalNumByteSlice;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    localNumUint: {
        field: TxnField.LocalNumUint;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    localNumBytes: {
        field: TxnField.LocalNumByteSlice;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    extraProgramPages: {
        field: TxnField.ExtraProgramPages;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lastLog: {
        field: TxnField.LastLog;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    logs: {
        field: TxnField.Logs;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        indexable: true;
        computed: true;
    };
    numApprovalProgramPages: {
        field: TxnField.NumApprovalProgramPages;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    approvalProgramPages: {
        field: TxnField.ApprovalProgramPages;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        indexable: true;
        arrayPromote: true;
    };
    numClearStateProgramPages: {
        field: TxnField.NumClearStateProgramPages;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    clearStateProgramPages: {
        field: TxnField.ClearStateProgramPages;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        indexable: true;
        arrayPromote: true;
    };
    appArgs: {
        field: TxnField.ApplicationArgs;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        indexable: true;
    };
    accounts: {
        field: TxnField.Accounts;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        indexable: true;
    };
    assets: {
        field: TxnField.Assets;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        indexable: true;
    };
    apps: {
        field: TxnField.Applications;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        indexable: true;
    };
    createdApp: {
        field: TxnField.CreatedApplicationID;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    /**
     * Number of logs
     */
    numLogs: {
        field: TxnField.NumLogs;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    sender: {
        field: TxnField.Sender;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    fee: {
        field: TxnField.Fee;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    firstValid: {
        field: TxnField.FirstValid;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    firstValidTime: {
        field: TxnField.FirstValidTime;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lastValid: {
        field: TxnField.LastValid;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    note: {
        field: TxnField.Note;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    lease: {
        field: TxnField.Lease;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    typeBytes: {
        field: TxnField.Type;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    type: {
        field: TxnField.TypeEnum;
        ptype: import("./ptypes").Uint64EnumMemberType;
        comment: string;
        computed: true;
    };
    groupIndex: {
        field: TxnField.GroupIndex;
        ptype: import("./ptypes").InstanceType;
        comment: string[];
        computed: true;
    };
    txnId: {
        field: TxnField.TxID;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    rekeyTo: {
        field: TxnField.RekeyTo;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    freezeAsset: {
        field: TxnField.FreezeAsset;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    freezeAccount: {
        field: TxnField.FreezeAssetAccount;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    frozen: {
        field: TxnField.FreezeAssetFrozen;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    xferAsset: {
        field: TxnField.XferAsset;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    assetAmount: {
        field: TxnField.AssetAmount;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    assetSender: {
        field: TxnField.AssetSender;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    assetReceiver: {
        field: TxnField.AssetReceiver;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    assetCloseTo: {
        field: TxnField.AssetCloseTo;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    configAsset: {
        field: TxnField.ConfigAsset;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    createdAsset: {
        field: TxnField.CreatedAssetID;
        ptype: import("./ptypes").InstanceType;
        comment: string;
        computed: true;
    };
    total: {
        field: TxnField.ConfigAssetTotal;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    decimals: {
        field: TxnField.ConfigAssetDecimals;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    defaultFrozen: {
        field: TxnField.ConfigAssetDefaultFrozen;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    unitName: {
        field: TxnField.ConfigAssetUnitName;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    assetName: {
        field: TxnField.ConfigAssetName;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    url: {
        field: TxnField.ConfigAssetURL;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    metadataHash: {
        field: TxnField.ConfigAssetMetadataHash;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    manager: {
        field: TxnField.ConfigAssetManager;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    reserve: {
        field: TxnField.ConfigAssetReserve;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    freeze: {
        field: TxnField.ConfigAssetFreeze;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    clawback: {
        field: TxnField.ConfigAssetClawback;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    voteKey: {
        field: TxnField.VotePK;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    selectionKey: {
        field: TxnField.SelectionPK;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    voteFirst: {
        field: TxnField.VoteFirst;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    voteLast: {
        field: TxnField.VoteLast;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    voteKeyDilution: {
        field: TxnField.VoteKeyDilution;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    nonparticipation: {
        field: TxnField.Nonparticipation;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    stateProofKey: {
        field: TxnField.StateProofPK;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    receiver: {
        field: TxnField.Receiver;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    amount: {
        field: TxnField.Amount;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
    closeRemainderTo: {
        field: TxnField.CloseRemainderTo;
        ptype: import("./ptypes").InstanceType;
        comment: string;
    };
};
export declare const txnKindToFields: {
    1: {
        receiver: {
            field: TxnField.Receiver;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        amount: {
            field: TxnField.Amount;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        closeRemainderTo: {
            field: TxnField.CloseRemainderTo;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        sender: {
            field: TxnField.Sender;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        fee: {
            field: TxnField.Fee;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        firstValid: {
            field: TxnField.FirstValid;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        firstValidTime: {
            field: TxnField.FirstValidTime;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        lastValid: {
            field: TxnField.LastValid;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        note: {
            field: TxnField.Note;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        lease: {
            field: TxnField.Lease;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        typeBytes: {
            field: TxnField.Type;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        type: {
            field: TxnField.TypeEnum;
            ptype: import("./ptypes").Uint64EnumMemberType;
            comment: string;
            computed: true;
        };
        groupIndex: {
            field: TxnField.GroupIndex;
            ptype: import("./ptypes").InstanceType;
            comment: string[];
            computed: true;
        };
        txnId: {
            field: TxnField.TxID;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        rekeyTo: {
            field: TxnField.RekeyTo;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
    };
    2: {
        voteKey: {
            field: TxnField.VotePK;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        selectionKey: {
            field: TxnField.SelectionPK;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        voteFirst: {
            field: TxnField.VoteFirst;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        voteLast: {
            field: TxnField.VoteLast;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        voteKeyDilution: {
            field: TxnField.VoteKeyDilution;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        nonparticipation: {
            field: TxnField.Nonparticipation;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        stateProofKey: {
            field: TxnField.StateProofPK;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        sender: {
            field: TxnField.Sender;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        fee: {
            field: TxnField.Fee;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        firstValid: {
            field: TxnField.FirstValid;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        firstValidTime: {
            field: TxnField.FirstValidTime;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        lastValid: {
            field: TxnField.LastValid;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        note: {
            field: TxnField.Note;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        lease: {
            field: TxnField.Lease;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        typeBytes: {
            field: TxnField.Type;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        type: {
            field: TxnField.TypeEnum;
            ptype: import("./ptypes").Uint64EnumMemberType;
            comment: string;
            computed: true;
        };
        groupIndex: {
            field: TxnField.GroupIndex;
            ptype: import("./ptypes").InstanceType;
            comment: string[];
            computed: true;
        };
        txnId: {
            field: TxnField.TxID;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        rekeyTo: {
            field: TxnField.RekeyTo;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
    };
    3: {
        configAsset: {
            field: TxnField.ConfigAsset;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        createdAsset: {
            field: TxnField.CreatedAssetID;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        total: {
            field: TxnField.ConfigAssetTotal;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        decimals: {
            field: TxnField.ConfigAssetDecimals;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        defaultFrozen: {
            field: TxnField.ConfigAssetDefaultFrozen;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        unitName: {
            field: TxnField.ConfigAssetUnitName;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        assetName: {
            field: TxnField.ConfigAssetName;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        url: {
            field: TxnField.ConfigAssetURL;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        metadataHash: {
            field: TxnField.ConfigAssetMetadataHash;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        manager: {
            field: TxnField.ConfigAssetManager;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        reserve: {
            field: TxnField.ConfigAssetReserve;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        freeze: {
            field: TxnField.ConfigAssetFreeze;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        clawback: {
            field: TxnField.ConfigAssetClawback;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        sender: {
            field: TxnField.Sender;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        fee: {
            field: TxnField.Fee;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        firstValid: {
            field: TxnField.FirstValid;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        firstValidTime: {
            field: TxnField.FirstValidTime;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        lastValid: {
            field: TxnField.LastValid;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        note: {
            field: TxnField.Note;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        lease: {
            field: TxnField.Lease;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        typeBytes: {
            field: TxnField.Type;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        type: {
            field: TxnField.TypeEnum;
            ptype: import("./ptypes").Uint64EnumMemberType;
            comment: string;
            computed: true;
        };
        groupIndex: {
            field: TxnField.GroupIndex;
            ptype: import("./ptypes").InstanceType;
            comment: string[];
            computed: true;
        };
        txnId: {
            field: TxnField.TxID;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        rekeyTo: {
            field: TxnField.RekeyTo;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
    };
    4: {
        xferAsset: {
            field: TxnField.XferAsset;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        assetAmount: {
            field: TxnField.AssetAmount;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        assetSender: {
            field: TxnField.AssetSender;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        assetReceiver: {
            field: TxnField.AssetReceiver;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        assetCloseTo: {
            field: TxnField.AssetCloseTo;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        sender: {
            field: TxnField.Sender;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        fee: {
            field: TxnField.Fee;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        firstValid: {
            field: TxnField.FirstValid;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        firstValidTime: {
            field: TxnField.FirstValidTime;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        lastValid: {
            field: TxnField.LastValid;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        note: {
            field: TxnField.Note;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        lease: {
            field: TxnField.Lease;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        typeBytes: {
            field: TxnField.Type;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        type: {
            field: TxnField.TypeEnum;
            ptype: import("./ptypes").Uint64EnumMemberType;
            comment: string;
            computed: true;
        };
        groupIndex: {
            field: TxnField.GroupIndex;
            ptype: import("./ptypes").InstanceType;
            comment: string[];
            computed: true;
        };
        txnId: {
            field: TxnField.TxID;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        rekeyTo: {
            field: TxnField.RekeyTo;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
    };
    5: {
        freezeAsset: {
            field: TxnField.FreezeAsset;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        freezeAccount: {
            field: TxnField.FreezeAssetAccount;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        frozen: {
            field: TxnField.FreezeAssetFrozen;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        sender: {
            field: TxnField.Sender;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        fee: {
            field: TxnField.Fee;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        firstValid: {
            field: TxnField.FirstValid;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        firstValidTime: {
            field: TxnField.FirstValidTime;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        lastValid: {
            field: TxnField.LastValid;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        note: {
            field: TxnField.Note;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        lease: {
            field: TxnField.Lease;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        typeBytes: {
            field: TxnField.Type;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        type: {
            field: TxnField.TypeEnum;
            ptype: import("./ptypes").Uint64EnumMemberType;
            comment: string;
            computed: true;
        };
        groupIndex: {
            field: TxnField.GroupIndex;
            ptype: import("./ptypes").InstanceType;
            comment: string[];
            computed: true;
        };
        txnId: {
            field: TxnField.TxID;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        rekeyTo: {
            field: TxnField.RekeyTo;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
    };
    6: {
        appId: {
            field: TxnField.ApplicationID;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        onCompletion: {
            field: TxnField.OnCompletion;
            ptype: import("./ptypes").Uint64EnumMemberType;
            comment: string;
        };
        numAppArgs: {
            field: TxnField.NumAppArgs;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        numAccounts: {
            field: TxnField.NumAccounts;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        approvalProgram: {
            field: TxnField.ApprovalProgramPages;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        clearStateProgram: {
            field: TxnField.ClearStateProgramPages;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        numAssets: {
            field: TxnField.NumAssets;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        numApps: {
            field: TxnField.NumApplications;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        globalNumUint: {
            field: TxnField.GlobalNumUint;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        globalNumBytes: {
            field: TxnField.GlobalNumByteSlice;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        localNumUint: {
            field: TxnField.LocalNumUint;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        localNumBytes: {
            field: TxnField.LocalNumByteSlice;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        extraProgramPages: {
            field: TxnField.ExtraProgramPages;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        lastLog: {
            field: TxnField.LastLog;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        logs: {
            field: TxnField.Logs;
            ptype: import("./ptypes").InstanceType;
            comment: string[];
            indexable: true;
            computed: true;
        };
        numApprovalProgramPages: {
            field: TxnField.NumApprovalProgramPages;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        approvalProgramPages: {
            field: TxnField.ApprovalProgramPages;
            ptype: import("./ptypes").InstanceType;
            comment: string[];
            indexable: true;
            arrayPromote: true;
        };
        numClearStateProgramPages: {
            field: TxnField.NumClearStateProgramPages;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        clearStateProgramPages: {
            field: TxnField.ClearStateProgramPages;
            ptype: import("./ptypes").InstanceType;
            comment: string[];
            indexable: true;
            arrayPromote: true;
        };
        appArgs: {
            field: TxnField.ApplicationArgs;
            ptype: import("./ptypes").InstanceType;
            comment: string[];
            indexable: true;
        };
        accounts: {
            field: TxnField.Accounts;
            ptype: import("./ptypes").InstanceType;
            comment: string[];
            indexable: true;
        };
        assets: {
            field: TxnField.Assets;
            ptype: import("./ptypes").InstanceType;
            comment: string[];
            indexable: true;
        };
        apps: {
            field: TxnField.Applications;
            ptype: import("./ptypes").InstanceType;
            comment: string[];
            indexable: true;
        };
        createdApp: {
            field: TxnField.CreatedApplicationID;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        /**
         * Number of logs
         */
        numLogs: {
            field: TxnField.NumLogs;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        sender: {
            field: TxnField.Sender;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        fee: {
            field: TxnField.Fee;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        firstValid: {
            field: TxnField.FirstValid;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        firstValidTime: {
            field: TxnField.FirstValidTime;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        lastValid: {
            field: TxnField.LastValid;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        note: {
            field: TxnField.Note;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        lease: {
            field: TxnField.Lease;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
        typeBytes: {
            field: TxnField.Type;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        type: {
            field: TxnField.TypeEnum;
            ptype: import("./ptypes").Uint64EnumMemberType;
            comment: string;
            computed: true;
        };
        groupIndex: {
            field: TxnField.GroupIndex;
            ptype: import("./ptypes").InstanceType;
            comment: string[];
            computed: true;
        };
        txnId: {
            field: TxnField.TxID;
            ptype: import("./ptypes").InstanceType;
            comment: string;
            computed: true;
        };
        rekeyTo: {
            field: TxnField.RekeyTo;
            ptype: import("./ptypes").InstanceType;
            comment: string;
        };
    };
};
export declare const txnFieldName: Record<"approvalProgram" | "clearStateProgram" | "frozen" | "extraProgramPages" | "type" | "sender" | "fee" | "firstValid" | "firstValidTime" | "lastValid" | "note" | "lease" | "typeBytes" | "groupIndex" | "txnId" | "rekeyTo" | "receiver" | "amount" | "closeRemainderTo" | "voteKey" | "selectionKey" | "voteFirst" | "voteLast" | "voteKeyDilution" | "nonparticipation" | "stateProofKey" | "configAsset" | "createdAsset" | "total" | "decimals" | "defaultFrozen" | "unitName" | "assetName" | "url" | "metadataHash" | "manager" | "reserve" | "freeze" | "clawback" | "xferAsset" | "assetAmount" | "assetSender" | "assetReceiver" | "assetCloseTo" | "freezeAsset" | "freezeAccount" | "appId" | "onCompletion" | "numAppArgs" | "numAccounts" | "numAssets" | "numApps" | "globalNumUint" | "globalNumBytes" | "localNumUint" | "localNumBytes" | "lastLog" | "logs" | "numApprovalProgramPages" | "approvalProgramPages" | "numClearStateProgramPages" | "clearStateProgramPages" | "appArgs" | "accounts" | "assets" | "apps" | "createdApp" | "numLogs", "approvalProgram" | "clearStateProgram" | "frozen" | "extraProgramPages" | "type" | "sender" | "fee" | "firstValid" | "firstValidTime" | "lastValid" | "note" | "lease" | "typeBytes" | "groupIndex" | "txnId" | "rekeyTo" | "receiver" | "amount" | "closeRemainderTo" | "voteKey" | "selectionKey" | "voteFirst" | "voteLast" | "voteKeyDilution" | "nonparticipation" | "stateProofKey" | "configAsset" | "createdAsset" | "total" | "decimals" | "defaultFrozen" | "unitName" | "assetName" | "url" | "metadataHash" | "manager" | "reserve" | "freeze" | "clawback" | "xferAsset" | "assetAmount" | "assetSender" | "assetReceiver" | "assetCloseTo" | "freezeAsset" | "freezeAccount" | "appId" | "onCompletion" | "numAppArgs" | "numAccounts" | "numAssets" | "numApps" | "globalNumUint" | "globalNumBytes" | "localNumUint" | "localNumBytes" | "lastLog" | "logs" | "numApprovalProgramPages" | "approvalProgramPages" | "numClearStateProgramPages" | "clearStateProgramPages" | "appArgs" | "accounts" | "assets" | "apps" | "createdApp" | "numLogs">;
