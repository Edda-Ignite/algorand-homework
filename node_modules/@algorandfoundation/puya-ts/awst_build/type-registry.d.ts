import type { awst } from '../awst';
import type { SourceLocation } from '../awst/source-location';
import type { DeliberateAny } from '../typescript-helpers';
import type { InstanceBuilder, InstanceExpressionBuilder, NodeBuilder } from './eb';
import type { GenericPType } from './ptypes';
import { PType } from './ptypes';
import type { SymbolName } from './symbol-name';
type ValueExpressionBuilderCtor<TPType extends PType> = {
    new (expr: awst.Expression, ptype: PType): InstanceExpressionBuilder<TPType>;
};
type SingletonExpressionBuilderCtor = {
    new (sourceLocation: SourceLocation, ptype: PType): NodeBuilder;
};
type PTypeClass<T extends PType = PType> = {
    new (...args: DeliberateAny): T;
};
export declare class TypeRegistry {
    get hasRegistrations(): boolean;
    private readonly singletonEbs;
    private readonly instanceEbs;
    private readonly types;
    private readonly genericTypes;
    register({ ptype, singletonEb, instanceEb, }: {
        ptype: PType | PTypeClass;
        singletonEb: SingletonExpressionBuilderCtor;
        instanceEb?: undefined;
    } | {
        ptype: PType | PTypeClass;
        singletonEb?: undefined;
        instanceEb: ValueExpressionBuilderCtor<PType>;
    }): void;
    registerGeneric<T extends PType>({ generic, ptype, instanceEb, }: {
        generic: GenericPType<T>;
        ptype: PTypeClass<T>;
        instanceEb: ValueExpressionBuilderCtor<PType>;
    }): void;
    /**
     * Try to resolve a symbol name to a singleton ptype
     * @param symbolName The name of the symbol
     */
    tryResolveSingletonName(symbolName: SymbolName): PType | undefined;
    /**
     * Try to resolve a symbol name to an instance ptype
     * @param symbolName The name of the symbol
     */
    tryResolveInstancePType(symbolName: SymbolName): PType | undefined;
    resolveInstancePType(symbolName: SymbolName, sourceLocation: SourceLocation): PType;
    tryGetSingletonEb(ptype: PType, sourceLocation: SourceLocation): NodeBuilder | undefined;
    getSingletonEb(ptype: PType, sourceLocation: SourceLocation): NodeBuilder;
    getInstanceEb(expression: awst.Expression, ptype: PType): InstanceBuilder;
    tryGetInstanceEb(expression: awst.Expression, ptype: PType): InstanceBuilder | undefined;
    resolveGenericPType(symbolName: SymbolName, typeArgs: PType[], sourceLocation: SourceLocation): PType;
    tryResolveGenericPType(symbolName: SymbolName, typeArgs: PType[]): PType | undefined;
}
export declare const typeRegistry: TypeRegistry;
export declare function instanceEb(expr: awst.Expression, ptype: PType): InstanceBuilder<PType>;
export {};
