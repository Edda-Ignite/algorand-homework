import ts from 'typescript';
import { SourceLocation } from '../awst/source-location';
import type { PType } from './ptypes';
export declare class TypeResolver {
    private readonly checker;
    private readonly programDirectory;
    constructor(checker: ts.TypeChecker, programDirectory: string);
    private getUnaliasedSymbolForNode;
    resolveTypeParameters(node: ts.CallExpression | ts.NewExpression, sourceLocation: SourceLocation): PType[];
    resolve(node: ts.Node, sourceLocation: SourceLocation): PType;
    resolveTypeNode(node: ts.TypeNode, sourceLocation: SourceLocation): PType;
    resolveType(tsType: ts.Type, sourceLocation: SourceLocation): PType;
    private reflectObjectType;
    private reflectConstructorType;
    private reflectFunctionType;
    private reflectStructType;
    private reflectContractType;
    private resolveClusteredPrototype;
    private getTypeName;
    private getLocationOfSymbol;
    private tryGetLocalSymbolName;
    private getSymbolFullName;
}
