{"version":3,"file":"puyats-ls.mjs","sources":["../../src/language-server/diagnostics.ts","../../src/language-server/language-server.ts","../../src/language-server/parse.ts","../../src/bin/puyats-ls.ts"],"sourcesContent":["import upath from 'upath'\nimport type { Connection, Diagnostic } from 'vscode-languageserver'\nimport { DiagnosticSeverity } from 'vscode-languageserver'\nimport type { TextDocument } from 'vscode-languageserver-textdocument'\nimport type { TextDocuments } from 'vscode-languageserver/node.js'\nimport { URI } from 'vscode-uri'\nimport type { SourceLocation } from '../awst/source-location'\nimport { compile } from '../compile'\nimport { Constants } from '../constants'\nimport { processInputPaths } from '../input-paths/process-input-paths'\nimport type { LogEvent } from '../logger'\nimport { LoggingContext, LogLevel } from '../logger'\nimport type { AlgoFile } from '../options'\nimport { CompileOptions } from '../options'\n\ntype LogEventWithSource = LogEvent & { sourceLocation: SourceLocation & { file: string } }\n\nfunction prepareFiles(workspaceFolder: string, documents: TextDocuments<TextDocument>) {\n  const files = processInputPaths({ paths: [workspaceFolder] })\n\n  // To support unsaved files, we need to replace the file content with the content of the document\n  return files.map((file) => {\n    const fileUri = URI.file(file.sourceFile).toString()\n    const document = documents.get(fileUri)\n\n    if (document) {\n      return {\n        sourceFile: file.sourceFile,\n        outDir: '',\n        fileContents: document.getText(),\n      } satisfies AlgoFile\n    }\n    return file\n  })\n}\n\nasync function compileAndExtractLogs(files: AlgoFile[]): Promise<LogEventWithSource[]> {\n  const logCtx = LoggingContext.create()\n  await logCtx.run(async () => {\n    await compile(\n      new CompileOptions({\n        filePaths: files,\n        dryRun: false,\n      }),\n    )\n  })\n  return logCtx.logEvents\n    .filter((e) => e.level === LogLevel.Error || e.level === LogLevel.Warning)\n    .filter((e): e is LogEventWithSource => Boolean(e.sourceLocation?.file))\n}\n\nfunction mapToDiagnostic(event: LogEventWithSource): Diagnostic {\n  return {\n    source: Constants.languageServerSource,\n    severity: event.level === LogLevel.Error ? DiagnosticSeverity.Error : DiagnosticSeverity.Warning,\n    range: {\n      start: {\n        line: event.sourceLocation.line - 1,\n        character: event.sourceLocation.column,\n      },\n      end: {\n        line: event.sourceLocation.endLine - 1,\n        character: event.sourceLocation.endColumn,\n      },\n    },\n    message: event.message,\n  }\n}\n\nexport async function getWorkspaceDiagnostics(\n  connection: Connection,\n  workspaceFolder: string,\n  documents: TextDocuments<TextDocument>,\n): Promise<Map<string, Diagnostic[]>> {\n  try {\n    connection.console.debug(`Parsing ${workspaceFolder}`)\n\n    const files = prepareFiles(workspaceFolder, documents)\n    const logEvents = await compileAndExtractLogs(files)\n\n    return files.reduce((acc, file) => {\n      const diagnostics = logEvents.filter((e) => e.sourceLocation.file === file.sourceFile).map(mapToDiagnostic)\n      acc.set(\n        URI.file(upath.isAbsolute(file.sourceFile) ? file.sourceFile : upath.join(workspaceFolder, file.sourceFile)).toString(),\n        diagnostics,\n      )\n      return acc\n    }, new Map<string, Diagnostic[]>())\n  } catch (error) {\n    connection.console.error(`Failed to compile: ${JSON.stringify(error)}`)\n    return new Map()\n  }\n}\n","import { concatMap, debounceTime, map, Observable } from 'rxjs'\nimport { TextDocument } from 'vscode-languageserver-textdocument'\nimport type {\n  CodeAction,\n  Connection,\n  Diagnostic,\n  Disposable,\n  InitializeResult,\n  TextDocumentChangeEvent,\n} from 'vscode-languageserver/node.js'\nimport {\n  createClientSocketTransport,\n  createConnection,\n  ProposedFeatures,\n  TextDocuments,\n  TextDocumentSyncKind,\n} from 'vscode-languageserver/node.js'\nimport { URI } from 'vscode-uri'\nimport { Constants } from '../constants'\nimport { getWorkspaceDiagnostics } from './diagnostics'\n\nexport const getDebugLspPort = () => {\n  const port = Number(process.env.PUYA_TS_DEBUG_LSP_PORT)\n  return !isNaN(port) && port > 0 ? port : undefined\n}\n\nconst resolveConnection = async () => {\n  const lspPort = getDebugLspPort()\n\n  if (!lspPort) {\n    return createConnection(ProposedFeatures.all)\n  }\n\n  // When the debug env variable PUYA_TS_DEBUG_LSP_PORT is set, we start the server with socket transport.\n  // Note: this is actually the oposite to how vscode-languageserver is designed.\n  // Normally, the extension is the web socker server and the language server is the client.\n  // Here, we flip it. This allows an easier debugging experience.\n  // If changes are made to the language server, you can just restart the debugger\n  // and choose the option \"Restart language server\" in the VS Code extension host instance.\n  const transport = await createClientSocketTransport(lspPort)\n  const protocol = await transport.onConnected()\n\n  return createConnection(ProposedFeatures.all, protocol[0], protocol[1])\n}\n\nexport async function startLanguageServer() {\n  const connection = await resolveConnection()\n\n  // Create a simple text document manager.\n  const documents = new TextDocuments(TextDocument)\n  let workspaceFolder: string | undefined\n\n  const disposables: Disposable[] = []\n\n  disposables.push(\n    connection.onInitialize((params) => {\n      // The extension sets the workspaceFolder property\n      // therefore, workspaceFolders is an array with one element\n      workspaceFolder = params.workspaceFolders?.[0]?.uri\n\n      const result: InitializeResult = {\n        capabilities: {\n          textDocumentSync: TextDocumentSyncKind.Incremental,\n          codeActionProvider: {\n            resolveProvider: false,\n          },\n        },\n      }\n      return result\n    }),\n  )\n\n  disposables.push(\n    connection.onInitialized(() => {\n      connection.console.log(`${Constants.languageServerSource}-ls initialized`)\n    }),\n  )\n\n  const documentChangeObservable = new Observable<TextDocumentChangeEvent<TextDocument>>((subscriber) => {\n    const subscription = documents.onDidChangeContent((event) => {\n      subscriber.next(event)\n    })\n\n    return subscription.dispose\n  })\n\n  const documentChangeSubscription = documentChangeObservable\n    .pipe(\n      debounceTime(200),\n      map((_) => buildWorkspaceDiagnosticsMap(connection, workspaceFolder, documents)),\n      concatMap(async (v) => sendDiagnostics(connection, await v)),\n    )\n    .subscribe(async () => {\n      // All logic for handling the document change event is done inside the pipe\n      // This is to make sure that the diagnostics are sent in the right order\n      // The empty subscribe function here is to make the observable run\n    })\n\n  // Make the text document manager listen on the connection\n  // for open, change and close text document events\n  disposables.push(documents.listen(connection))\n\n  disposables.push(\n    connection.onCodeAction((params) => {\n      const document = documents.get(params.textDocument.uri)\n      if (!document) {\n        return []\n      }\n\n      const codeActions: CodeAction[] = []\n\n      return codeActions\n    }),\n  )\n\n  const shutdownDisposable = connection.onShutdown(() => {\n    documentChangeSubscription.unsubscribe()\n    disposables.forEach((d) => d.dispose())\n  })\n\n  connection.onExit(() => {\n    shutdownDisposable.dispose()\n  })\n\n  connection.listen()\n}\n\nasync function buildWorkspaceDiagnosticsMap(\n  connection: Connection,\n  workspaceFolder: string | undefined,\n  documents: TextDocuments<TextDocument>,\n): Promise<Map<string, Diagnostic[]>> {\n  if (!workspaceFolder) {\n    connection.console.error('Workspace folder not set')\n\n    return new Map()\n  }\n\n  const workspacePath = URI.parse(workspaceFolder).fsPath\n  return await getWorkspaceDiagnostics(connection, workspacePath, documents)\n}\n\nasync function sendDiagnostics(connection: Connection, diagnosticsMap: Map<string, Diagnostic[]>) {\n  await Promise.all(\n    Array.from(diagnosticsMap, ([docUri, diagnostics]) =>\n      connection.sendDiagnostics({\n        uri: docUri,\n        diagnostics: diagnostics,\n      }),\n    ),\n  )\n}\n","import { ArgumentParser } from 'argparse'\nimport { appVersion } from '../cli/app-version'\nimport { checkNodeVersion } from '../cli/check-node-version'\nimport { startLanguageServer } from './language-server'\n\nexport async function parseCliArguments() {\n  checkNodeVersion()\n  const prog = 'puyats-ls'\n  const parser = new ArgumentParser({\n    prog,\n  })\n\n  parser.add_argument('--version', {\n    action: 'store_const',\n    help: 'Show application version',\n    const: 'version',\n    dest: 'command',\n  })\n  const [result, _] = parser.parse_known_args() as [PuyaTsCommand, unknown]\n\n  switch (result.command) {\n    case 'version':\n      /* eslint-disable-next-line no-console */\n      console.log(appVersion(prog))\n      break\n    default:\n      await startLanguageServer()\n      break\n  }\n}\n\ntype PuyaTsCommand = NoCommandArgs | VersionCommand\ninterface NoCommandArgs {\n  command: 'none'\n}\ninterface VersionCommand {\n  command: 'version'\n}\n","#!/usr/bin/env node\n\nimport { parseCliArguments } from '../language-server/parse'\n\nvoid parseCliArguments()\n"],"names":[],"mappings":"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"}