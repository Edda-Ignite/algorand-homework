import fs__default from 'fs';
import { fileURLToPath } from 'node:url';
import upath from 'upath';
import { C as Constants, p as parseSemVer } from './resolve-puya-path-zgZNWMEr.js';
import chalk from 'chalk';

function appVersion(name = 'puya-ts') {
    let dirName = upath.dirname(fileURLToPath(import.meta.url));
    while (true) {
        const packageJsonPath = upath.join(dirName, 'package.json');
        if (fs__default.existsSync(packageJsonPath)) {
            const version = JSON.parse(fs__default.readFileSync(packageJsonPath, 'utf8')).version;
            return [
                `${name} ${version}`,
                '',
                'Targets:',
                `puya ${Constants.targetedPuyaVersion}`,
                `AVM ${Constants.supportedAvmVersions.join(', ')}`,
            ].join('\r\n');
        }
        if (dirName === upath.dirname(dirName))
            break;
        dirName = upath.dirname(dirName);
    }
    return `Cannot determine puya-ts version`;
}

function writeError(text) {
    // eslint-disable-next-line no-console
    console.error(chalk.red(text));
}
function checkNodeVersion() {
    const min = parseSemVer(Constants.minNodeVersion);
    const actual = parseSemVer(process.versions.node);
    if (actual.major < min.major ||
        (actual.major === min.major && actual.minor < min.minor) ||
        (actual.major === min.major && actual.minor === min.minor && actual.rev < min.rev)) {
        writeError(`Installed node version ${process.versions.node} is older than the minimum required version ${Constants.minNodeVersion}. You may experience compatability issues.`);
    }
}

export { appVersion as a, checkNodeVersion as c };
//# sourceMappingURL=check-node-version-DQviFT_1.js.map
