import chalk from 'chalk';
import { i as isMinLevel, L as LogLevel, a as LoggingContext } from './resolve-puya-path-zgZNWMEr.js';

const levelConfig = {
    /* eslint-disable no-console */
    debug: { colorFn: chalk.green, writeFn: console.debug },
    info: { colorFn: chalk.green, writeFn: console.info },
    warning: { colorFn: chalk.yellow, writeFn: console.warn },
    error: { colorFn: chalk.red, writeFn: console.error },
    critical: { colorFn: chalk.red, writeFn: console.error },
    /* eslint-enable no-console */
};
class ConsoleLogSink {
    minLogLevel;
    constructor(minLogLevel) {
        this.minLogLevel = minLogLevel;
    }
    add(logEvent) {
        const config = levelConfig[logEvent.level];
        let logText = `${config.colorFn(logEvent.level)}: ${logEvent.message}`;
        if (logEvent.sourceLocation) {
            const sourceLocationText = logEvent.sourceLocation.toString();
            const indentSize = sourceLocationText.length + logEvent.level.length + 4;
            const sourceSummary = isMinLevel(logEvent.level, LogLevel.Warning) ? this.getSourceSummary(logEvent.sourceLocation, indentSize) : '';
            logText = `${sourceLocationText} ${logText}${sourceSummary}`;
        }
        config.writeFn(logText);
    }
    getSourceSummary(sourceLocation, indent) {
        const sourceFile = sourceLocation.file && LoggingContext.current.sourcesByPath[sourceLocation.file];
        if (!sourceFile || sourceLocation.scope === 'file')
            return '';
        const line = sourceFile[sourceLocation.line - 1];
        const trimmedLine = line.trimStart();
        const marker = `${''.padStart(sourceLocation.column - (line.length - trimmedLine.length))}^${''.padStart(Math.max(sourceLocation.endColumn - sourceLocation.column - 1, 0), '~')}`;
        const indentChars = ''.padStart(indent, ' ');
        return `\n${indentChars}${trimmedLine}\n${indentChars}${marker}`;
    }
}

export { ConsoleLogSink as C };
//# sourceMappingURL=console-log-sink-BUoObqbL.js.map
