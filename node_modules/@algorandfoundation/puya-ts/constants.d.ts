export declare const Constants: {
    readonly algoTsPackage: "@algorandfoundation/algorand-typescript";
    readonly moduleNames: {
        readonly polytype: "polytype/lib/polytype-module.d.ts";
        readonly algoTs: {
            readonly arc28: "@algorandfoundation/algorand-typescript/arc-28.d.ts";
            readonly arc4: {
                readonly index: "@algorandfoundation/algorand-typescript/arc4/index.d.ts";
                readonly encodedTypes: "@algorandfoundation/algorand-typescript/arc4/encoded-types.d.ts";
                readonly c2c: "@algorandfoundation/algorand-typescript/arc4/c2c.d.ts";
            };
            readonly baseContract: "@algorandfoundation/algorand-typescript/base-contract.d.ts";
            readonly box: "@algorandfoundation/algorand-typescript/box.d.ts";
            readonly compiled: "@algorandfoundation/algorand-typescript/compiled.d.ts";
            readonly itxn: "@algorandfoundation/algorand-typescript/itxn.d.ts";
            readonly gtxn: "@algorandfoundation/algorand-typescript/gtxn.d.ts";
            readonly logicSig: "@algorandfoundation/algorand-typescript/logic-sig.d.ts";
            readonly mutableArray: "@algorandfoundation/algorand-typescript/mutable-array.d.ts";
            readonly onCompleteAction: "@algorandfoundation/algorand-typescript/on-complete-action.d.ts";
            readonly op: "@algorandfoundation/algorand-typescript/op.d.ts";
            readonly primitives: "@algorandfoundation/algorand-typescript/primitives.d.ts";
            readonly reference: "@algorandfoundation/algorand-typescript/reference.d.ts";
            readonly state: "@algorandfoundation/algorand-typescript/state.d.ts";
            readonly templateVar: "@algorandfoundation/algorand-typescript/template-var.d.ts";
            readonly transactions: "@algorandfoundation/algorand-typescript/transactions.d.ts";
            readonly util: "@algorandfoundation/algorand-typescript/util.d.ts";
        };
    };
    readonly symbolNames: {
        readonly approvalProgramMethodName: "approvalProgram";
        readonly clearStateProgramMethodName: "clearStateProgram";
        readonly arc4BareDecoratorName: "arc4.baremethod";
        readonly arc4AbiDecoratorName: "arc4.abimethod";
        readonly contractOptionsDecoratorName: "contract";
        readonly logicSigOptionsDecoratorName: "logicsig";
        readonly constructorMethodName: "constructor";
        readonly logicSigProgramMethodName: "program";
        readonly defaultCreateMethodName: "__algots__.defaultCreate";
        readonly conventionalRouting: {
            readonly closeOutOfApplicationMethodName: "closeOutOfApplication";
            readonly createApplicationMethodName: "createApplication";
            readonly deleteApplicationMethodName: "deleteApplication";
            readonly optInToApplicationMethodName: "optInToApplication";
            readonly updateApplicationMethodName: "updateApplication";
        };
    };
    readonly algo: {
        readonly arc4: {
            readonly logPrefixHex: "151F7C75";
        };
        readonly addressLength: 32;
        readonly encodedAddressLength: 58;
        readonly maxTransactionGroupSize: 16;
        readonly zeroAddressB32: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ";
    };
    readonly supportedAvmVersions: readonly [10n, 11n];
    readonly targetedPuyaVersion: "4.7.0";
    readonly puyaGithubRepo: "algorandfoundation/puya";
    readonly minNodeVersion: "22.14.0";
    readonly languageServerSource: "puyats";
};
export type SupportedAvmVersion = (typeof Constants.supportedAvmVersions)[number];
