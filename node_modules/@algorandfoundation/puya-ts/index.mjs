import { u as uint8ArrayToBigInt, b as uint8ArrayToBase64, c as uint8ArrayToBase32, d as uint8ArrayToHex, e as uint8ArrayToUtf8, f as base64ToUint8Array, g as base32ToUint8Array, h as hexToUint8Array, j as bigIntToUint8Array, k as utf8ToUint8Array } from './resolve-puya-path-zgZNWMEr.js';
export { a as LoggingContext, S as SourceLocation } from './resolve-puya-path-zgZNWMEr.js';
import { A as ALL_OP_ENUMS, a as ARC4ArrayType, b as ARC4BoolClass, c as ARC4EncodedType, d as ARC4InstanceType, e as ARC4StrClass, f as ARC4StructClass, g as ARC4StructType, h as ARC4TupleType, i as AccountFunction, j as AddressClass, k as AnyPType, l as ApplicationFunctionType, m as ApplicationTxnFunction, n as ApprovalProgram, o as Arc4TupleClass, p as Arc4TupleGeneric, q as ArrayLiteralPType, r as ArrayPType, s as AssetConfigTxnFunction, t as AssetFreezeTxnFunction, u as AssetFunction, v as AssetTransferTxnFunction, B as BaseContractClassType, w as BigIntLiteralPType, x as BigUintFunction, y as BooleanFunction, z as BoxFunction, C as BoxGeneric, D as BoxMapFunction, E as BoxMapGeneric, F as BoxMapPType, G as BoxPType, H as BoxRefFunction, I as BoxRefPType, J as ByteClass, K as BytesFunction, L as ClassMethodDecoratorContext, M as ClearStateProgram, N as ClusteredContractClassType, O as ClusteredPrototype, P as ContractClassPType, Q as ContractProxyGeneric, R as ContractProxyType, S as DynamicArrayConstructor, T as DynamicArrayGeneric, U as DynamicArrayType, V as DynamicBytesConstructor, W as DynamicBytesType, X as FunctionPType, Y as GeneratorGeneric, Z as GeneratorType, _ as GenericPType, $ as GlobalStateFunction, a0 as GlobalStateGeneric, a1 as GlobalStateType, a2 as GroupTransactionPType, a3 as InnerTransactionPType, a4 as InstanceType, a5 as InternalType, a6 as IntersectionPType, a7 as IntrinsicEnumType, a8 as IntrinsicFunctionGroupType, a9 as IntrinsicFunctionGroupTypeType, aa as IntrinsicFunctionType, ab as IntrinsicFunctionTypeType, ac as IterableIteratorGeneric, ad as IterableIteratorType, ae as ItxnParamsPType, af as KeyRegistrationTxnFunction, ag as LibClassType, ah as LibFunctionType, ai as LocalStateFunction, aj as LocalStateGeneric, ak as LocalStateType, al as LogicSigPType, am as MutableArrayConstructor, an as MutableArrayGeneric, ao as MutableArrayType, ap as NamespacePType, aq as NativeNumericType, ar as NumericLiteralPType, as as ObjectPType, at as PType, au as PaymentTxnFunction, av as PolytypeClassMethodHelper, aw as PromiseGeneric, ax as PromiseType, ay as StaticArrayConstructor, az as StaticArrayGeneric, aA as StaticArrayType, aB as StaticBytesConstructor, aC as StaticBytesGeneric, aD as StaticBytesType, aE as StorageProxyPType, aF as StringFunction, aG as SuperPrototypeSelector, aH as SuperPrototypeSelectorGeneric, aI as TemplateVarFunction, aJ as TransactionFunction, aK as TransactionFunctionType, aL as TransientType, aM as TuplePType, aN as TypeParameterType, aO as TypedApplicationCallResponseGeneric, aP as TypedApplicationCallResponseType, aQ as UFixedNxMClass, aR as UFixedNxMGeneric, aS as UFixedNxMType, aT as Uint64EnumMemberType, aU as Uint64EnumType, aV as Uint64Function, aW as UintN128Class, aX as UintN16Class, aY as UintN256Class, aZ as UintN32Class, a_ as UintN64Class, a$ as UintN8Class, b0 as UintNClass, b1 as UintNGeneric, b2 as UintNType, b3 as UnionPType, b4 as UnsupportedType, b5 as abiCallFunction, b6 as accountPType, b7 as anyGtxnType, b8 as anyItxnType, b9 as anyPType, ba as applicationCallGtxnType, bb as applicationCallItxnFn, bc as applicationCallItxnParamsType, bd as applicationItxnType, be as applicationPType, bf as arc28EmitFunction, bg as arc4AbiMethodDecorator, bh as arc4AddressAlias, bi as arc4BareMethodDecorator, bj as arc4BaseContractType, bk as arc4BooleanType, bl as arc4ByteAlias, bm as arc4EncodedLengthFunction, bn as arc4StringType, bo as arc4StructBaseType, bp as assertFunction, bq as assertMatchFunction, br as assetConfigGtxnType, bs as assetConfigItxnFn, bt as assetConfigItxnParamsType, bu as assetConfigItxnType, bv as assetFreezeGtxnType, bw as assetFreezeItxnFn, bx as assetFreezeItxnParamsType, by as assetFreezeItxnType, bz as assetPType, bA as assetTransferGtxnType, bB as assetTransferItxnFn, bC as assetTransferItxnParamsType, bD as assetTransferItxnType, bE as base64PType, bF as baseContractType, bG as bigIntPType, bH as biguintPType, bI as boolPType, bJ as boxRefType, bK as bytesPType, bL as compileArc4Function, bM as compileFunctionType, bN as compiledContractType, bO as compiledLogicSigType, bP as contractOptionsDecorator, bQ as decodeArc4Function, bR as ecPType, bS as ecdsaPType, bT as encodeArc4Function, bU as ensureBudgetFunction, bV as errFunction, bW as gtxnUnion, bX as interpretAsArc4Function, bY as keyRegistrationGtxnType, bZ as keyRegistrationItxnFn, b_ as keyRegistrationItxnParamsType, b$ as keyRegistrationItxnType, c0 as logFunction, c1 as logicSigBaseType, c2 as logicSigOptionsDecorator, c3 as matchFunction, c4 as methodSelectorFunction, c5 as mimcConfigurationsPType, c6 as neverPType, c7 as nullPType, c8 as numberPType, c9 as onCompleteActionType, ca as opUpFeeSourceType, cb as paymentGtxnType, cc as paymentItxnFn, cd as paymentItxnParamsType, ce as paymentItxnType, cf as ptypeToArc4EncodedType, cg as stringPType, ch as submitGroupItxnFunction, ci as transactionTypeType, cj as uint64PType, ck as undefinedPType, cl as unknownPType, cm as urangeFunction, cn as voidPType, co as vrfVerifyPType } from './options-D7OvUjFs.js';
export { cu as CompileOptions, cr as TypeResolver, cs as compile, ct as processInputPaths, cp as registerPTypes, cq as typeRegistry } from './options-D7OvUjFs.js';
import 'tslib';
import 'fs';
import 'node:async_hooks';
import 'typescript';
import 'node:buffer';
import 'node:fs';
import 'node:util';
import 'upath';
import 'signal-exit';
import 'crypto';
import 'node:url';
import 'path';
import 'tar';
import 'glob';
import 'os';
import 'polytype';
import 'change-case';
import 'node:path';
import 'arcsecond';
import 'cross-spawn';
import 'zod';
import 'minimatch';

/* This file aggregates all ptypes into a single export for external consumption of the compiler api */

var forExport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ALL_OP_ENUMS: ALL_OP_ENUMS,
    ARC4ArrayType: ARC4ArrayType,
    ARC4BoolClass: ARC4BoolClass,
    ARC4EncodedType: ARC4EncodedType,
    ARC4InstanceType: ARC4InstanceType,
    ARC4StrClass: ARC4StrClass,
    ARC4StructClass: ARC4StructClass,
    ARC4StructType: ARC4StructType,
    ARC4TupleType: ARC4TupleType,
    AccountFunction: AccountFunction,
    AddressClass: AddressClass,
    AnyPType: AnyPType,
    ApplicationFunctionType: ApplicationFunctionType,
    ApplicationTxnFunction: ApplicationTxnFunction,
    ApprovalProgram: ApprovalProgram,
    Arc4TupleClass: Arc4TupleClass,
    Arc4TupleGeneric: Arc4TupleGeneric,
    ArrayLiteralPType: ArrayLiteralPType,
    ArrayPType: ArrayPType,
    AssetConfigTxnFunction: AssetConfigTxnFunction,
    AssetFreezeTxnFunction: AssetFreezeTxnFunction,
    AssetFunction: AssetFunction,
    AssetTransferTxnFunction: AssetTransferTxnFunction,
    BaseContractClassType: BaseContractClassType,
    BigIntLiteralPType: BigIntLiteralPType,
    BigUintFunction: BigUintFunction,
    BooleanFunction: BooleanFunction,
    BoxFunction: BoxFunction,
    BoxGeneric: BoxGeneric,
    BoxMapFunction: BoxMapFunction,
    BoxMapGeneric: BoxMapGeneric,
    BoxMapPType: BoxMapPType,
    BoxPType: BoxPType,
    BoxRefFunction: BoxRefFunction,
    BoxRefPType: BoxRefPType,
    ByteClass: ByteClass,
    BytesFunction: BytesFunction,
    ClassMethodDecoratorContext: ClassMethodDecoratorContext,
    ClearStateProgram: ClearStateProgram,
    ClusteredContractClassType: ClusteredContractClassType,
    ClusteredPrototype: ClusteredPrototype,
    ContractClassPType: ContractClassPType,
    ContractProxyGeneric: ContractProxyGeneric,
    ContractProxyType: ContractProxyType,
    DynamicArrayConstructor: DynamicArrayConstructor,
    DynamicArrayGeneric: DynamicArrayGeneric,
    DynamicArrayType: DynamicArrayType,
    DynamicBytesConstructor: DynamicBytesConstructor,
    DynamicBytesType: DynamicBytesType,
    FunctionPType: FunctionPType,
    GeneratorGeneric: GeneratorGeneric,
    GeneratorType: GeneratorType,
    GenericPType: GenericPType,
    GlobalStateFunction: GlobalStateFunction,
    GlobalStateGeneric: GlobalStateGeneric,
    GlobalStateType: GlobalStateType,
    GroupTransactionPType: GroupTransactionPType,
    InnerTransactionPType: InnerTransactionPType,
    InstanceType: InstanceType,
    InternalType: InternalType,
    IntersectionPType: IntersectionPType,
    IntrinsicEnumType: IntrinsicEnumType,
    IntrinsicFunctionGroupType: IntrinsicFunctionGroupType,
    IntrinsicFunctionGroupTypeType: IntrinsicFunctionGroupTypeType,
    IntrinsicFunctionType: IntrinsicFunctionType,
    IntrinsicFunctionTypeType: IntrinsicFunctionTypeType,
    IterableIteratorGeneric: IterableIteratorGeneric,
    IterableIteratorType: IterableIteratorType,
    ItxnParamsPType: ItxnParamsPType,
    KeyRegistrationTxnFunction: KeyRegistrationTxnFunction,
    LibClassType: LibClassType,
    LibFunctionType: LibFunctionType,
    LocalStateFunction: LocalStateFunction,
    LocalStateGeneric: LocalStateGeneric,
    LocalStateType: LocalStateType,
    LogicSigPType: LogicSigPType,
    MutableArrayConstructor: MutableArrayConstructor,
    MutableArrayGeneric: MutableArrayGeneric,
    MutableArrayType: MutableArrayType,
    NamespacePType: NamespacePType,
    NativeNumericType: NativeNumericType,
    NumericLiteralPType: NumericLiteralPType,
    ObjectPType: ObjectPType,
    PType: PType,
    PaymentTxnFunction: PaymentTxnFunction,
    PolytypeClassMethodHelper: PolytypeClassMethodHelper,
    PromiseGeneric: PromiseGeneric,
    PromiseType: PromiseType,
    StaticArrayConstructor: StaticArrayConstructor,
    StaticArrayGeneric: StaticArrayGeneric,
    StaticArrayType: StaticArrayType,
    StaticBytesConstructor: StaticBytesConstructor,
    StaticBytesGeneric: StaticBytesGeneric,
    StaticBytesType: StaticBytesType,
    StorageProxyPType: StorageProxyPType,
    StringFunction: StringFunction,
    SuperPrototypeSelector: SuperPrototypeSelector,
    SuperPrototypeSelectorGeneric: SuperPrototypeSelectorGeneric,
    TemplateVarFunction: TemplateVarFunction,
    TransactionFunction: TransactionFunction,
    TransactionFunctionType: TransactionFunctionType,
    TransientType: TransientType,
    TuplePType: TuplePType,
    TypeParameterType: TypeParameterType,
    TypedApplicationCallResponseGeneric: TypedApplicationCallResponseGeneric,
    TypedApplicationCallResponseType: TypedApplicationCallResponseType,
    UFixedNxMClass: UFixedNxMClass,
    UFixedNxMGeneric: UFixedNxMGeneric,
    UFixedNxMType: UFixedNxMType,
    Uint64EnumMemberType: Uint64EnumMemberType,
    Uint64EnumType: Uint64EnumType,
    Uint64Function: Uint64Function,
    UintN128Class: UintN128Class,
    UintN16Class: UintN16Class,
    UintN256Class: UintN256Class,
    UintN32Class: UintN32Class,
    UintN64Class: UintN64Class,
    UintN8Class: UintN8Class,
    UintNClass: UintNClass,
    UintNGeneric: UintNGeneric,
    UintNType: UintNType,
    UnionPType: UnionPType,
    UnsupportedType: UnsupportedType,
    abiCallFunction: abiCallFunction,
    accountPType: accountPType,
    anyGtxnType: anyGtxnType,
    anyItxnType: anyItxnType,
    anyPType: anyPType,
    applicationCallGtxnType: applicationCallGtxnType,
    applicationCallItxnFn: applicationCallItxnFn,
    applicationCallItxnParamsType: applicationCallItxnParamsType,
    applicationItxnType: applicationItxnType,
    applicationPType: applicationPType,
    arc28EmitFunction: arc28EmitFunction,
    arc4AbiMethodDecorator: arc4AbiMethodDecorator,
    arc4AddressAlias: arc4AddressAlias,
    arc4BareMethodDecorator: arc4BareMethodDecorator,
    arc4BaseContractType: arc4BaseContractType,
    arc4BooleanType: arc4BooleanType,
    arc4ByteAlias: arc4ByteAlias,
    arc4EncodedLengthFunction: arc4EncodedLengthFunction,
    arc4StringType: arc4StringType,
    arc4StructBaseType: arc4StructBaseType,
    assertFunction: assertFunction,
    assertMatchFunction: assertMatchFunction,
    assetConfigGtxnType: assetConfigGtxnType,
    assetConfigItxnFn: assetConfigItxnFn,
    assetConfigItxnParamsType: assetConfigItxnParamsType,
    assetConfigItxnType: assetConfigItxnType,
    assetFreezeGtxnType: assetFreezeGtxnType,
    assetFreezeItxnFn: assetFreezeItxnFn,
    assetFreezeItxnParamsType: assetFreezeItxnParamsType,
    assetFreezeItxnType: assetFreezeItxnType,
    assetPType: assetPType,
    assetTransferGtxnType: assetTransferGtxnType,
    assetTransferItxnFn: assetTransferItxnFn,
    assetTransferItxnParamsType: assetTransferItxnParamsType,
    assetTransferItxnType: assetTransferItxnType,
    base64PType: base64PType,
    baseContractType: baseContractType,
    bigIntPType: bigIntPType,
    biguintPType: biguintPType,
    boolPType: boolPType,
    boxRefType: boxRefType,
    bytesPType: bytesPType,
    compileArc4Function: compileArc4Function,
    compileFunctionType: compileFunctionType,
    compiledContractType: compiledContractType,
    compiledLogicSigType: compiledLogicSigType,
    contractOptionsDecorator: contractOptionsDecorator,
    decodeArc4Function: decodeArc4Function,
    ecPType: ecPType,
    ecdsaPType: ecdsaPType,
    encodeArc4Function: encodeArc4Function,
    ensureBudgetFunction: ensureBudgetFunction,
    errFunction: errFunction,
    gtxnUnion: gtxnUnion,
    interpretAsArc4Function: interpretAsArc4Function,
    keyRegistrationGtxnType: keyRegistrationGtxnType,
    keyRegistrationItxnFn: keyRegistrationItxnFn,
    keyRegistrationItxnParamsType: keyRegistrationItxnParamsType,
    keyRegistrationItxnType: keyRegistrationItxnType,
    logFunction: logFunction,
    logicSigBaseType: logicSigBaseType,
    logicSigOptionsDecorator: logicSigOptionsDecorator,
    matchFunction: matchFunction,
    methodSelectorFunction: methodSelectorFunction,
    mimcConfigurationsPType: mimcConfigurationsPType,
    neverPType: neverPType,
    nullPType: nullPType,
    numberPType: numberPType,
    onCompleteActionType: onCompleteActionType,
    opUpFeeSourceType: opUpFeeSourceType,
    paymentGtxnType: paymentGtxnType,
    paymentItxnFn: paymentItxnFn,
    paymentItxnParamsType: paymentItxnParamsType,
    paymentItxnType: paymentItxnType,
    ptypeToArc4EncodedType: ptypeToArc4EncodedType,
    stringPType: stringPType,
    submitGroupItxnFunction: submitGroupItxnFunction,
    transactionTypeType: transactionTypeType,
    uint64PType: uint64PType,
    undefinedPType: undefinedPType,
    unknownPType: unknownPType,
    urangeFunction: urangeFunction,
    voidPType: voidPType,
    vrfVerifyPType: vrfVerifyPType
});

const encodingUtil = {
    utf8ToUint8Array,
    bigIntToUint8Array,
    hexToUint8Array,
    base32ToUint8Array,
    base64ToUint8Array,
    uint8ArrayToUtf8,
    uint8ArrayToHex,
    uint8ArrayToBase32,
    uint8ArrayToBase64,
    uint8ArrayToBigInt,
};

export { encodingUtil, forExport as ptypes };
//# sourceMappingURL=index.mjs.map
