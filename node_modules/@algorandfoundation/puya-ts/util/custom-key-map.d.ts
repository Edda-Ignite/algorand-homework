import type { DeliberateAny } from '../typescript-helpers';
export declare abstract class CustomKeyMap<TKey, TValue> implements Map<TKey, TValue> {
    #private;
    constructor(keySerializer: (key: TKey) => number | bigint | string);
    clear(): void;
    delete(key: TKey): boolean;
    forEach(callbackfn: (value: TValue, key: TKey, map: Map<TKey, TValue>) => void, thisArg?: DeliberateAny): void;
    get(key: TKey): TValue | undefined;
    has(key: TKey): boolean;
    set(key: TKey, value: TValue): this;
    get size(): number;
    entries(): MapIterator<[TKey, TValue]>;
    keys(): MapIterator<TKey>;
    values(): MapIterator<TValue>;
    [Symbol.iterator](): MapIterator<[TKey, TValue]>;
    get [Symbol.toStringTag](): string;
}
